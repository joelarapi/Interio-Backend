{
  "C:\\Users\\User\\Documents\\GitHub\\Interio-Backend": {
    "versionSfCore": null,
    "versionFramework": "4.4.7",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "env": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "taleas1",
            "app": "interio",
            "service": "interio-service",
            "provider": {
              "name": "aws",
              "runtime": "nodejs16.x",
              "stage": "dev",
              "region": "eu-central-1",
              "memorySize": 128,
              "environment": {
                "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
              },
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "GetUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getUser"
                    }
                  },
                  "CreateUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-createUser"
                    }
                  },
                  "DeleteUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-deleteUser"
                    }
                  },
                  "GetUserNameLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getUserName"
                    }
                  },
                  "UpdateUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-updateUser"
                    }
                  },
                  "GetBusinessByIdLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getBusinessById"
                    }
                  },
                  "CreateBusinessLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-createBusiness"
                    }
                  },
                  "DeleteBusinessLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-deleteBusiness"
                    }
                  },
                  "GetBusinessNameLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getBusinessName"
                    }
                  },
                  "UpdateBusinessLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-updateBusiness"
                    }
                  },
                  "GetPostByIdLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getPostById"
                    }
                  },
                  "CreatePostLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-createPost"
                    }
                  },
                  "DeletePostLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-deletePost"
                    }
                  },
                  "GetFiltredPostsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getFiltredPosts"
                    }
                  },
                  "GetAvailablePostsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getAvailablePosts"
                    }
                  },
                  "CreateOfferLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-createOffer"
                    }
                  },
                  "DeleteOfferLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-deleteOffer"
                    }
                  },
                  "GetOfferByIdLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getOfferById"
                    }
                  },
                  "CreateCategoryLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-createCategory"
                    }
                  },
                  "DeleteCategoryLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-deleteCategory"
                    }
                  },
                  "GetCategoryByIdLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getCategoryById"
                    }
                  },
                  "GetAllCategoriesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getAllCategories"
                    }
                  },
                  "CreateJobLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-createJob"
                    }
                  },
                  "GetJobByIdLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getJobById"
                    }
                  },
                  "CreateCommentLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-createComment"
                    }
                  },
                  "GetCommentByIdLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getCommentById"
                    }
                  },
                  "DeleteCommentLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-deleteComment"
                    }
                  },
                  "CreateMessageLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-createMessage"
                    }
                  },
                  "GetMessageByIdLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getMessageById"
                    }
                  },
                  "CreateNotificationLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-createNotification"
                    }
                  },
                  "GetNotificationByIdLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getNotificationById"
                    }
                  },
                  "CreateSubscriptionPlanLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-createSubscriptionPlan"
                    }
                  },
                  "GetSubscriptionPlanLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getSubscriptionPlan"
                    }
                  },
                  "GetAllSubscriptionPlansLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getAllSubscriptionPlans"
                    }
                  },
                  "DeleteSubscriptionPlanLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-deleteSubscriptionPlan"
                    }
                  },
                  "CreateSubscriptionManagerLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-createSubscriptionManager"
                    }
                  },
                  "GetSubscriptionManagerByIdLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getSubscriptionManagerById"
                    }
                  },
                  "UpdateSubscriptionManagerLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-updateSubscriptionManager"
                    }
                  },
                  "GetSubscriptionManagerLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getSubscriptionManager"
                    }
                  },
                  "CreatePaymentTransactionLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-createPaymentTransaction"
                    }
                  },
                  "GetPaymentTransactionLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/interio-service-dev-getPaymentTransaction"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "interio-service",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/interio-service-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/interio-service-dev*:*:*"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "interio-service",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "GetUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/user/getUserById.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getUser",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetUserLogGroup"
                    ]
                  },
                  "CreateUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/user/createUser.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-createUser",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateUserLogGroup"
                    ]
                  },
                  "DeleteUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/user/deleteUser.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-deleteUser",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteUserLogGroup"
                    ]
                  },
                  "GetUserNameLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/user/getUserByName.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getUserName",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetUserNameLogGroup"
                    ]
                  },
                  "UpdateUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/user/updateUser.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-updateUser",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateUserLogGroup"
                    ]
                  },
                  "GetBusinessByIdLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/business/getBusinessById.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getBusinessById",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetBusinessByIdLogGroup"
                    ]
                  },
                  "CreateBusinessLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/business/createBusiness.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-createBusiness",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateBusinessLogGroup"
                    ]
                  },
                  "DeleteBusinessLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/business/deleteBusiness.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-deleteBusiness",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteBusinessLogGroup"
                    ]
                  },
                  "GetBusinessNameLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/business/getBusinessByName.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getBusinessName",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetBusinessNameLogGroup"
                    ]
                  },
                  "UpdateBusinessLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/business/updateBusiness.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-updateBusiness",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateBusinessLogGroup"
                    ]
                  },
                  "GetPostByIdLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/post/getPostById.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getPostById",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetPostByIdLogGroup"
                    ]
                  },
                  "CreatePostLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/post/createPost.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-createPost",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreatePostLogGroup"
                    ]
                  },
                  "DeletePostLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/post/deletePost.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-deletePost",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeletePostLogGroup"
                    ]
                  },
                  "GetFiltredPostsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/post/getFilteredPosts.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getFiltredPosts",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetFiltredPostsLogGroup"
                    ]
                  },
                  "GetAvailablePostsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/post/getAvailablePosts.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getAvailablePosts",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetAvailablePostsLogGroup"
                    ]
                  },
                  "CreateOfferLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/offer/createOffer.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-createOffer",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateOfferLogGroup"
                    ]
                  },
                  "DeleteOfferLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/offer/deleteOffer.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-deleteOffer",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteOfferLogGroup"
                    ]
                  },
                  "GetOfferByIdLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/offer/getOfferById.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getOfferById",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetOfferByIdLogGroup"
                    ]
                  },
                  "CreateCategoryLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/categories/createCategory.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-createCategory",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateCategoryLogGroup"
                    ]
                  },
                  "DeleteCategoryLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/categories/deleteCategory.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-deleteCategory",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteCategoryLogGroup"
                    ]
                  },
                  "GetCategoryByIdLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/categories/getCategoryById.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getCategoryById",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetCategoryByIdLogGroup"
                    ]
                  },
                  "GetAllCategoriesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/categories/getAllCategories.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getAllCategories",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetAllCategoriesLogGroup"
                    ]
                  },
                  "CreateJobLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/finishedJobs/createJob.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-createJob",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateJobLogGroup"
                    ]
                  },
                  "GetJobByIdLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/finishedJobs/getJobById.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getJobById",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetJobByIdLogGroup"
                    ]
                  },
                  "CreateCommentLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/comment/createComment.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-createComment",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateCommentLogGroup"
                    ]
                  },
                  "GetCommentByIdLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/comment/getCommentById.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getCommentById",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetCommentByIdLogGroup"
                    ]
                  },
                  "DeleteCommentLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/comment/deleteComment.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-deleteComment",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteCommentLogGroup"
                    ]
                  },
                  "CreateMessageLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/message/createMessage.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-createMessage",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateMessageLogGroup"
                    ]
                  },
                  "GetMessageByIdLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/message/getMessageById.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getMessageById",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetMessageByIdLogGroup"
                    ]
                  },
                  "CreateNotificationLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/notification/createNotification.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-createNotification",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateNotificationLogGroup"
                    ]
                  },
                  "GetNotificationByIdLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/notification/getNotificationById.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getNotificationById",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetNotificationByIdLogGroup"
                    ]
                  },
                  "CreateSubscriptionPlanLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/subscriptionPlan/createPlan.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-createSubscriptionPlan",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateSubscriptionPlanLogGroup"
                    ]
                  },
                  "GetSubscriptionPlanLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/subscriptionPlan/getPlanById.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getSubscriptionPlan",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetSubscriptionPlanLogGroup"
                    ]
                  },
                  "GetAllSubscriptionPlansLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/subscriptionPlan/getAll.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getAllSubscriptionPlans",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetAllSubscriptionPlansLogGroup"
                    ]
                  },
                  "DeleteSubscriptionPlanLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/subscriptionPlan/deletePlan.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-deleteSubscriptionPlan",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteSubscriptionPlanLogGroup"
                    ]
                  },
                  "CreateSubscriptionManagerLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/subscriptionManager/createManager.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-createSubscriptionManager",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateSubscriptionManagerLogGroup"
                    ]
                  },
                  "GetSubscriptionManagerByIdLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/subscriptionManager/getManagerById.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getSubscriptionManagerById",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetSubscriptionManagerByIdLogGroup"
                    ]
                  },
                  "UpdateSubscriptionManagerLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/subscriptionManager/updateManager.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-updateSubscriptionManager",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateSubscriptionManagerLogGroup"
                    ]
                  },
                  "GetSubscriptionManagerLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/subscriptionManager/getSubscriptionManager.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getSubscriptionManager",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetSubscriptionManagerLogGroup"
                    ]
                  },
                  "CreatePaymentTransactionLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/paymentTransaction/createPayment.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-createPaymentTransaction",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreatePaymentTransactionLogGroup"
                    ]
                  },
                  "GetPaymentTransactionLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                        "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                      },
                      "Handler": "handlers/paymentTransaction/getPaymentById.handler",
                      "Runtime": "nodejs16.x",
                      "FunctionName": "interio-service-dev-getPaymentTransaction",
                      "MemorySize": 128,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetPaymentTransactionLogGroup"
                    ]
                  },
                  "GetUserLambdaVersionLVaLQwtzET3Z6MzkXFNwDjLa5EGD0m6Guo9kwJqtNs": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetUserLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "CreateUserLambdaVersiondiPNlpA28vAeQbOUknDXgriD9NbxM0UqW0qWOue0": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateUserLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "DeleteUserLambdaVersionqPfCeY4pIAhD6VUNHmTH0hBnqx8JD3we07rcMvI8": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteUserLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetUserNameLambdaVersionoCIHJdvK6gjKXtn2sziel5dmuG5mR3sPrsBhxyZEI": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetUserNameLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "UpdateUserLambdaVersionEC9hsnvpB3Vr4S3lmLJX7fDmoojLWq7Ec6pYpzHmSQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateUserLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetBusinessByIdLambdaVersionm0VKkEqOZfvqA3sbwwzeZ0uh7km3N9vby9rcjWFWA": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetBusinessByIdLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "CreateBusinessLambdaVersioneOnzfdT2ywtuUHjnhM46aKscKXCMcebFqTDcmI0Svg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateBusinessLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "DeleteBusinessLambdaVersion959zZAST1AFCprkEunCUjDP3AEmJAqunEgHndVg7nBw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteBusinessLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetBusinessNameLambdaVersionfy3WYrmc4qpAetbuWZGYTxsicgJWi5SjTcOSuasyhk": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetBusinessNameLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "UpdateBusinessLambdaVersionCv58oH5h3Lc85wG0Ge6lsYoQhbB3qU5fihwdvfDZw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateBusinessLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetPostByIdLambdaVersionqK1iQJbUJSq1lnfuUF17ktTPSF4ImfSHrAOZHpYZW18": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetPostByIdLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "CreatePostLambdaVersionQ3MXNJo2kb492VPAdPfw8iPdF9rmWN4hz4YyFOmknPg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreatePostLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "DeletePostLambdaVersionaenPdqu6xKUzPAbxMSIKQJ6qb6bflLp4lR4eZKTAQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeletePostLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetFiltredPostsLambdaVersion8Pa2CBT7AMEJYr5IavQSeG0itqCE5WNWuqw91aFp0": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetFiltredPostsLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetAvailablePostsLambdaVersionHTV9W5xRrvjnY9OqsIJQHIE1e8HREcNuzlrSrS2q8QA": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetAvailablePostsLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "CreateOfferLambdaVersionQBYhiFqMrdjrQNVWEogAQbY3osUWubJ6GlNXIqzGEsU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateOfferLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "DeleteOfferLambdaVersionEH2FmIConFPbQcMZ64xQm4OGLOR6InRZXDsTpNm7yE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteOfferLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetOfferByIdLambdaVersionsL51Oe17mJNox2YsKJKAxXPkaesVgrl9ryWdPoyA": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetOfferByIdLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "CreateCategoryLambdaVersionyDWILpj8OPaI33LBa9bdYXzqPCVPoQf5s7fFNSFAR9M": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateCategoryLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "DeleteCategoryLambdaVersionZuZm6lagWVvng5n0BZvd3iPOf8JUABrhVGRc4DnqQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteCategoryLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetCategoryByIdLambdaVersionR7iNupptLs3CEyQKe9JddPh4E4jV0DRpkMJFK9IFP8": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetCategoryByIdLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetAllCategoriesLambdaVersiongZ3MDC9744VdW1PzgplsvodFM5CoFExYXHjQwleXowo": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetAllCategoriesLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "CreateJobLambdaVersion5eCTJpcgefxBlepYwctOIDPfOgnAuNloBmrcHFfxk": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateJobLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetJobByIdLambdaVersionxnpnth090BFjJGEXdVr2VZk0EF3yQHM2u9gbfOS03M": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetJobByIdLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "CreateCommentLambdaVersionvL54MBFlWuVOQ0wS5D1Xsv2D4gcppX8OMqdU5zRyPxQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateCommentLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetCommentByIdLambdaVersion3iFol9sZKJJLVeAl4JDEHNm80hXKZ7BNvejdG3BRg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetCommentByIdLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "DeleteCommentLambdaVersiond6ZiaUz2iy5caNvM2JqI209BiVBSxnGG2jKBA2pQ6Fo": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteCommentLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "CreateMessageLambdaVersionER0n2qIqAMUzUeS1vhcqU47kavn76GTf7ZRG69SZT8": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateMessageLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetMessageByIdLambdaVersionIlf4YcWFPPJfdAR8cpqpK1TX2l8WXsYVNtY6IR7o": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetMessageByIdLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "CreateNotificationLambdaVersion7HTT24tRWeuVU8J6YxxaNGNAemQgpcJpyQqn937mg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateNotificationLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetNotificationByIdLambdaVersionHyb6vZfsTIKXFA8zZY55lQTsyxWdPAZf7X73Mjs": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetNotificationByIdLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "CreateSubscriptionPlanLambdaVersioncMzbn1RcnCG5iHMMNtD1Undq64CjU1yrJYMVX6llu4": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateSubscriptionPlanLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetSubscriptionPlanLambdaVersion4VplnXM7srmv7nJ3tLvRPASzRlPnqud96sx4ztHfks": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetSubscriptionPlanLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetAllSubscriptionPlansLambdaVersion09pHQG2mxq702rQJ9VUJh5oCXVemg0A8AGUTXXyZgGk": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetAllSubscriptionPlansLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "DeleteSubscriptionPlanLambdaVersioniAAZd89xuTRCFWPjFrsUJBPujbkt1XWelZAPiiN84g": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteSubscriptionPlanLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "CreateSubscriptionManagerLambdaVersion4BVaYXQiWynVMdwaysC58jiHVjayD1rMo0hBHSkrus8": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateSubscriptionManagerLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetSubscriptionManagerByIdLambdaVersionKGLpHVSs4vj9MFzNfEbTiawUrKnw0wAlKtY2wxNfWc": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetSubscriptionManagerByIdLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "UpdateSubscriptionManagerLambdaVersionqRjeX2ZzStF1Qu4f6rCxPsMgrKkf2bCuiY5vCfnFuXA": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateSubscriptionManagerLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetSubscriptionManagerLambdaVersionNh2KQHecAYT8ErnfGOLiCzfUQUNzpW3SwtSIMfYDJ20": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetSubscriptionManagerLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "CreatePaymentTransactionLambdaVersionBPpqa6AjQBH2hZ6M0RIIYovmUgpdRU8wz7cL0uNbQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreatePaymentTransactionLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "GetPaymentTransactionLambdaVersion4ktyDE4oOOjkVcosMqGT8nqzKtis0QzN9REQoLfrUno": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetPaymentTransactionLambdaFunction"
                      },
                      "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-interio-service",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceUser": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "user",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUserIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUser"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUserSearch": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUser"
                      },
                      "PathPart": "search",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceBusiness": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "business",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceBusinessIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceBusiness"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceBusinessSearch": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceBusiness"
                      },
                      "PathPart": "search",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePost": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "post",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePostIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourcePost"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePostFiltred": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourcePost"
                      },
                      "PathPart": "filtred",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePostAvailable": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourcePost"
                      },
                      "PathPart": "available",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceOffer": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "offer",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceOfferIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceOffer"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceCategory": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "category",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceCategoryIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceCategory"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceCategoryAll": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceCategory"
                      },
                      "PathPart": "all",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceFinishedjobs": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "finishedJobs",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceFinishedjobsIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceFinishedjobs"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceComment": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "comment",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceCommentIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceComment"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMessage": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "message",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMessageIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMessage"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceNotification": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "notification",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceNotificationIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceNotification"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceSubscriptionplan": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "subscriptionPlan",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceSubscriptionplanIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceSubscriptionplan"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceSubscriptionplanAll": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceSubscriptionplan"
                      },
                      "PathPart": "all",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceSubscriptionmanager": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "subscriptionManager",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceSubscriptionmanagerIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceSubscriptionmanager"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceSubscriptionmanagerBusiness": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceSubscriptionmanager"
                      },
                      "PathPart": "business",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceSubscriptionmanagerBusinessIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceSubscriptionmanagerBusiness"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePaymenttransaction": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "paymentTransaction",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePaymenttransactionIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourcePaymenttransaction"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUserIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,DELETE,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUserIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUserOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUser"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUserSearchOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUserSearch"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodBusinessIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,DELETE,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBusinessIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodBusinessOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBusiness"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodBusinessSearchOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBusinessSearch"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPostIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePostIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPostOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePost"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPostFiltredOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePostFiltred"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPostAvailableOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePostAvailable"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodOfferOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceOffer"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodOfferIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceOfferIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodCategoryOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCategory"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodCategoryIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCategoryIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodCategoryAllOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCategoryAll"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodFinishedjobsOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceFinishedjobs"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodFinishedjobsIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceFinishedjobsIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodCommentOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceComment"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodCommentIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCommentIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMessageOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMessage"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMessageIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMessageIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodNotificationOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceNotification"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodNotificationIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceNotificationIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodSubscriptionplanOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionplan"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodSubscriptionplanIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionplanIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodSubscriptionplanAllOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionplanAll"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodSubscriptionmanagerOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionmanager"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodSubscriptionmanagerIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionmanagerIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodSubscriptionmanagerBusinessIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionmanagerBusinessIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPaymenttransactionOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePaymenttransaction"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPaymenttransactionIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePaymenttransactionIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUserIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUserIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUserPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUser"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUserIdVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUserIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUserSearchGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUserSearch"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetUserNameLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetUserNameLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUserIdVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUserIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "UpdateUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBusinessIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBusinessIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetBusinessByIdLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetBusinessByIdLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBusinessPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBusiness"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateBusinessLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateBusinessLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBusinessIdVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBusinessIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteBusinessLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteBusinessLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBusinessSearchGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBusinessSearch"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetBusinessNameLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetBusinessNameLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBusinessIdVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBusinessIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateBusinessLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "UpdateBusinessLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPostIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePostIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetPostByIdLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetPostByIdLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPostPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePost"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreatePostLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreatePostLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPostIdVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePostIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeletePostLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeletePostLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPostFiltredGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePostFiltred"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetFiltredPostsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetFiltredPostsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPostAvailableGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePostAvailable"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetAvailablePostsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetAvailablePostsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodOfferPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceOffer"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateOfferLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateOfferLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodOfferIdVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceOfferIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteOfferLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteOfferLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodOfferIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceOfferIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetOfferByIdLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetOfferByIdLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodCategoryPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCategory"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateCategoryLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateCategoryLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodCategoryIdVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCategoryIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteCategoryLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteCategoryLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodCategoryIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCategoryIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetCategoryByIdLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetCategoryByIdLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodCategoryAllGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCategoryAll"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetAllCategoriesLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetAllCategoriesLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodFinishedjobsPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceFinishedjobs"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateJobLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateJobLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodFinishedjobsIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceFinishedjobsIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetJobByIdLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetJobByIdLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodCommentPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceComment"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateCommentLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateCommentLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodCommentIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCommentIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetCommentByIdLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetCommentByIdLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodCommentIdVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCommentIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteCommentLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteCommentLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMessagePost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMessage"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateMessageLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateMessageLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMessageIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMessageIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetMessageByIdLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetMessageByIdLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodNotificationPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceNotification"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateNotificationLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateNotificationLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodNotificationIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceNotificationIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetNotificationByIdLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetNotificationByIdLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodSubscriptionplanPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionplan"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateSubscriptionPlanLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateSubscriptionPlanLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodSubscriptionplanIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionplanIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetSubscriptionPlanLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetSubscriptionPlanLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodSubscriptionplanAllGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionplanAll"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetAllSubscriptionPlansLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetAllSubscriptionPlansLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodSubscriptionplanIdVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionplanIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteSubscriptionPlanLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteSubscriptionPlanLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodSubscriptionmanagerPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionmanager"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateSubscriptionManagerLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateSubscriptionManagerLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodSubscriptionmanagerIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionmanagerIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetSubscriptionManagerByIdLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetSubscriptionManagerByIdLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodSubscriptionmanagerIdVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionmanagerIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateSubscriptionManagerLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "UpdateSubscriptionManagerLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodSubscriptionmanagerBusinessIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSubscriptionmanagerBusinessIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetSubscriptionManagerLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetSubscriptionManagerLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPaymenttransactionPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePaymenttransaction"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreatePaymentTransactionLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreatePaymentTransactionLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPaymenttransactionIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePaymenttransactionIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetPaymentTransactionLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetPaymentTransactionLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1729612119549": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodUserIdVarOptions",
                      "ApiGatewayMethodUserOptions",
                      "ApiGatewayMethodUserSearchOptions",
                      "ApiGatewayMethodBusinessIdVarOptions",
                      "ApiGatewayMethodBusinessOptions",
                      "ApiGatewayMethodBusinessSearchOptions",
                      "ApiGatewayMethodPostIdVarOptions",
                      "ApiGatewayMethodPostOptions",
                      "ApiGatewayMethodPostFiltredOptions",
                      "ApiGatewayMethodPostAvailableOptions",
                      "ApiGatewayMethodOfferOptions",
                      "ApiGatewayMethodOfferIdVarOptions",
                      "ApiGatewayMethodCategoryOptions",
                      "ApiGatewayMethodCategoryIdVarOptions",
                      "ApiGatewayMethodCategoryAllOptions",
                      "ApiGatewayMethodFinishedjobsOptions",
                      "ApiGatewayMethodFinishedjobsIdVarOptions",
                      "ApiGatewayMethodCommentOptions",
                      "ApiGatewayMethodCommentIdVarOptions",
                      "ApiGatewayMethodMessageOptions",
                      "ApiGatewayMethodMessageIdVarOptions",
                      "ApiGatewayMethodNotificationOptions",
                      "ApiGatewayMethodNotificationIdVarOptions",
                      "ApiGatewayMethodSubscriptionplanOptions",
                      "ApiGatewayMethodSubscriptionplanIdVarOptions",
                      "ApiGatewayMethodSubscriptionplanAllOptions",
                      "ApiGatewayMethodSubscriptionmanagerOptions",
                      "ApiGatewayMethodSubscriptionmanagerIdVarOptions",
                      "ApiGatewayMethodSubscriptionmanagerBusinessIdVarOptions",
                      "ApiGatewayMethodPaymenttransactionOptions",
                      "ApiGatewayMethodPaymenttransactionIdVarOptions",
                      "ApiGatewayMethodUserIdVarGet",
                      "ApiGatewayMethodUserPost",
                      "ApiGatewayMethodUserIdVarDelete",
                      "ApiGatewayMethodUserSearchGet",
                      "ApiGatewayMethodUserIdVarPut",
                      "ApiGatewayMethodBusinessIdVarGet",
                      "ApiGatewayMethodBusinessPost",
                      "ApiGatewayMethodBusinessIdVarDelete",
                      "ApiGatewayMethodBusinessSearchGet",
                      "ApiGatewayMethodBusinessIdVarPut",
                      "ApiGatewayMethodPostIdVarGet",
                      "ApiGatewayMethodPostPost",
                      "ApiGatewayMethodPostIdVarDelete",
                      "ApiGatewayMethodPostFiltredGet",
                      "ApiGatewayMethodPostAvailableGet",
                      "ApiGatewayMethodOfferPost",
                      "ApiGatewayMethodOfferIdVarDelete",
                      "ApiGatewayMethodOfferIdVarGet",
                      "ApiGatewayMethodCategoryPost",
                      "ApiGatewayMethodCategoryIdVarDelete",
                      "ApiGatewayMethodCategoryIdVarGet",
                      "ApiGatewayMethodCategoryAllGet",
                      "ApiGatewayMethodFinishedjobsPost",
                      "ApiGatewayMethodFinishedjobsIdVarGet",
                      "ApiGatewayMethodCommentPost",
                      "ApiGatewayMethodCommentIdVarGet",
                      "ApiGatewayMethodCommentIdVarDelete",
                      "ApiGatewayMethodMessagePost",
                      "ApiGatewayMethodMessageIdVarGet",
                      "ApiGatewayMethodNotificationPost",
                      "ApiGatewayMethodNotificationIdVarGet",
                      "ApiGatewayMethodSubscriptionplanPost",
                      "ApiGatewayMethodSubscriptionplanIdVarGet",
                      "ApiGatewayMethodSubscriptionplanAllGet",
                      "ApiGatewayMethodSubscriptionplanIdVarDelete",
                      "ApiGatewayMethodSubscriptionmanagerPost",
                      "ApiGatewayMethodSubscriptionmanagerIdVarGet",
                      "ApiGatewayMethodSubscriptionmanagerIdVarPut",
                      "ApiGatewayMethodSubscriptionmanagerBusinessIdVarGet",
                      "ApiGatewayMethodPaymenttransactionPost",
                      "ApiGatewayMethodPaymenttransactionIdVarGet"
                    ]
                  },
                  "GetUserLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateUserLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteUserLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetUserNameLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetUserNameLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateUserLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetBusinessByIdLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetBusinessByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateBusinessLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateBusinessLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteBusinessLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteBusinessLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetBusinessNameLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetBusinessNameLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateBusinessLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateBusinessLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetPostByIdLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetPostByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreatePostLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreatePostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeletePostLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeletePostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetFiltredPostsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetFiltredPostsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetAvailablePostsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetAvailablePostsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateOfferLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateOfferLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteOfferLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteOfferLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetOfferByIdLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetOfferByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateCategoryLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateCategoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteCategoryLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteCategoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetCategoryByIdLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetCategoryByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetAllCategoriesLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetAllCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateJobLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateJobLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetJobByIdLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetJobByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateCommentLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetCommentByIdLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetCommentByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteCommentLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateMessageLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateMessageLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetMessageByIdLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetMessageByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateNotificationLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateNotificationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetNotificationByIdLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetNotificationByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateSubscriptionPlanLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateSubscriptionPlanLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetSubscriptionPlanLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetSubscriptionPlanLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetAllSubscriptionPlansLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetAllSubscriptionPlansLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteSubscriptionPlanLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteSubscriptionPlanLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateSubscriptionManagerLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateSubscriptionManagerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetSubscriptionManagerByIdLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetSubscriptionManagerByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateSubscriptionManagerLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateSubscriptionManagerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetSubscriptionManagerLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetSubscriptionManagerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreatePaymentTransactionLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreatePaymentTransactionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetPaymentTransactionLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetPaymentTransactionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                    "Export": {
                      "Name": "sls-interio-service-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "GetUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetUserLambdaVersionLVaLQwtzET3Z6MzkXFNwDjLa5EGD0m6Guo9kwJqtNs"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateUserLambdaVersiondiPNlpA28vAeQbOUknDXgriD9NbxM0UqW0qWOue0"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-CreateUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteUserLambdaVersionqPfCeY4pIAhD6VUNHmTH0hBnqx8JD3we07rcMvI8"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-DeleteUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetUserNameLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetUserNameLambdaVersionoCIHJdvK6gjKXtn2sziel5dmuG5mR3sPrsBhxyZEI"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetUserNameLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateUserLambdaVersionEC9hsnvpB3Vr4S3lmLJX7fDmoojLWq7Ec6pYpzHmSQ"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-UpdateUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetBusinessByIdLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetBusinessByIdLambdaVersionm0VKkEqOZfvqA3sbwwzeZ0uh7km3N9vby9rcjWFWA"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetBusinessByIdLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateBusinessLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateBusinessLambdaVersioneOnzfdT2ywtuUHjnhM46aKscKXCMcebFqTDcmI0Svg"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-CreateBusinessLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteBusinessLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteBusinessLambdaVersion959zZAST1AFCprkEunCUjDP3AEmJAqunEgHndVg7nBw"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-DeleteBusinessLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetBusinessNameLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetBusinessNameLambdaVersionfy3WYrmc4qpAetbuWZGYTxsicgJWi5SjTcOSuasyhk"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetBusinessNameLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateBusinessLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateBusinessLambdaVersionCv58oH5h3Lc85wG0Ge6lsYoQhbB3qU5fihwdvfDZw"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-UpdateBusinessLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetPostByIdLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetPostByIdLambdaVersionqK1iQJbUJSq1lnfuUF17ktTPSF4ImfSHrAOZHpYZW18"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetPostByIdLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreatePostLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreatePostLambdaVersionQ3MXNJo2kb492VPAdPfw8iPdF9rmWN4hz4YyFOmknPg"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-CreatePostLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeletePostLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeletePostLambdaVersionaenPdqu6xKUzPAbxMSIKQJ6qb6bflLp4lR4eZKTAQ"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-DeletePostLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetFiltredPostsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetFiltredPostsLambdaVersion8Pa2CBT7AMEJYr5IavQSeG0itqCE5WNWuqw91aFp0"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetFiltredPostsLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetAvailablePostsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetAvailablePostsLambdaVersionHTV9W5xRrvjnY9OqsIJQHIE1e8HREcNuzlrSrS2q8QA"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetAvailablePostsLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateOfferLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateOfferLambdaVersionQBYhiFqMrdjrQNVWEogAQbY3osUWubJ6GlNXIqzGEsU"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-CreateOfferLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteOfferLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteOfferLambdaVersionEH2FmIConFPbQcMZ64xQm4OGLOR6InRZXDsTpNm7yE"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-DeleteOfferLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetOfferByIdLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetOfferByIdLambdaVersionsL51Oe17mJNox2YsKJKAxXPkaesVgrl9ryWdPoyA"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetOfferByIdLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateCategoryLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateCategoryLambdaVersionyDWILpj8OPaI33LBa9bdYXzqPCVPoQf5s7fFNSFAR9M"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-CreateCategoryLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteCategoryLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteCategoryLambdaVersionZuZm6lagWVvng5n0BZvd3iPOf8JUABrhVGRc4DnqQ"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-DeleteCategoryLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetCategoryByIdLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetCategoryByIdLambdaVersionR7iNupptLs3CEyQKe9JddPh4E4jV0DRpkMJFK9IFP8"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetCategoryByIdLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetAllCategoriesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetAllCategoriesLambdaVersiongZ3MDC9744VdW1PzgplsvodFM5CoFExYXHjQwleXowo"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetAllCategoriesLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateJobLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateJobLambdaVersion5eCTJpcgefxBlepYwctOIDPfOgnAuNloBmrcHFfxk"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-CreateJobLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetJobByIdLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetJobByIdLambdaVersionxnpnth090BFjJGEXdVr2VZk0EF3yQHM2u9gbfOS03M"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetJobByIdLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateCommentLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateCommentLambdaVersionvL54MBFlWuVOQ0wS5D1Xsv2D4gcppX8OMqdU5zRyPxQ"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-CreateCommentLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetCommentByIdLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetCommentByIdLambdaVersion3iFol9sZKJJLVeAl4JDEHNm80hXKZ7BNvejdG3BRg"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetCommentByIdLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteCommentLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteCommentLambdaVersiond6ZiaUz2iy5caNvM2JqI209BiVBSxnGG2jKBA2pQ6Fo"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-DeleteCommentLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateMessageLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateMessageLambdaVersionER0n2qIqAMUzUeS1vhcqU47kavn76GTf7ZRG69SZT8"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-CreateMessageLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetMessageByIdLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetMessageByIdLambdaVersionIlf4YcWFPPJfdAR8cpqpK1TX2l8WXsYVNtY6IR7o"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetMessageByIdLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateNotificationLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateNotificationLambdaVersion7HTT24tRWeuVU8J6YxxaNGNAemQgpcJpyQqn937mg"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-CreateNotificationLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetNotificationByIdLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetNotificationByIdLambdaVersionHyb6vZfsTIKXFA8zZY55lQTsyxWdPAZf7X73Mjs"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetNotificationByIdLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateSubscriptionPlanLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateSubscriptionPlanLambdaVersioncMzbn1RcnCG5iHMMNtD1Undq64CjU1yrJYMVX6llu4"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-CreateSubscriptionPlanLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetSubscriptionPlanLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetSubscriptionPlanLambdaVersion4VplnXM7srmv7nJ3tLvRPASzRlPnqud96sx4ztHfks"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetSubscriptionPlanLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetAllSubscriptionPlansLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetAllSubscriptionPlansLambdaVersion09pHQG2mxq702rQJ9VUJh5oCXVemg0A8AGUTXXyZgGk"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetAllSubscriptionPlansLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteSubscriptionPlanLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteSubscriptionPlanLambdaVersioniAAZd89xuTRCFWPjFrsUJBPujbkt1XWelZAPiiN84g"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-DeleteSubscriptionPlanLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateSubscriptionManagerLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateSubscriptionManagerLambdaVersion4BVaYXQiWynVMdwaysC58jiHVjayD1rMo0hBHSkrus8"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-CreateSubscriptionManagerLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetSubscriptionManagerByIdLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetSubscriptionManagerByIdLambdaVersionKGLpHVSs4vj9MFzNfEbTiawUrKnw0wAlKtY2wxNfWc"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetSubscriptionManagerByIdLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateSubscriptionManagerLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateSubscriptionManagerLambdaVersionqRjeX2ZzStF1Qu4f6rCxPsMgrKkf2bCuiY5vCfnFuXA"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-UpdateSubscriptionManagerLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetSubscriptionManagerLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetSubscriptionManagerLambdaVersionNh2KQHecAYT8ErnfGOLiCzfUQUNzpW3SwtSIMfYDJ20"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetSubscriptionManagerLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreatePaymentTransactionLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreatePaymentTransactionLambdaVersionBPpqa6AjQBH2hZ6M0RIIYovmUgpdRU8wz7cL0uNbQ"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-CreatePaymentTransactionLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetPaymentTransactionLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetPaymentTransactionLambdaVersion4ktyDE4oOOjkVcosMqGT8nqzKtis0QzN9REQoLfrUno"
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-GetPaymentTransactionLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-interio-service-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "getUser": {
                "handler": "handlers/user/getUserById.handler",
                "events": [
                  {
                    "http": {
                      "path": "user/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getUser",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetUserLambdaVersionLVaLQwtzET3Z6MzkXFNwDjLa5EGD0m6Guo9kwJqtNs"
              },
              "createUser": {
                "handler": "handlers/user/createUser.handler",
                "events": [
                  {
                    "http": {
                      "path": "user",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-createUser",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "CreateUserLambdaVersiondiPNlpA28vAeQbOUknDXgriD9NbxM0UqW0qWOue0"
              },
              "deleteUser": {
                "handler": "handlers/user/deleteUser.handler",
                "events": [
                  {
                    "http": {
                      "path": "user/{id}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-deleteUser",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "DeleteUserLambdaVersionqPfCeY4pIAhD6VUNHmTH0hBnqx8JD3we07rcMvI8"
              },
              "getUserName": {
                "handler": "handlers/user/getUserByName.handler",
                "events": [
                  {
                    "http": {
                      "path": "user/search",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getUserName",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetUserNameLambdaVersionoCIHJdvK6gjKXtn2sziel5dmuG5mR3sPrsBhxyZEI"
              },
              "updateUser": {
                "handler": "handlers/user/updateUser.handler",
                "events": [
                  {
                    "http": {
                      "path": "user/{id}",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-updateUser",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "UpdateUserLambdaVersionEC9hsnvpB3Vr4S3lmLJX7fDmoojLWq7Ec6pYpzHmSQ"
              },
              "getBusinessById": {
                "handler": "handlers/business/getBusinessById.handler",
                "events": [
                  {
                    "http": {
                      "path": "business/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getBusinessById",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetBusinessByIdLambdaVersionm0VKkEqOZfvqA3sbwwzeZ0uh7km3N9vby9rcjWFWA"
              },
              "createBusiness": {
                "handler": "handlers/business/createBusiness.handler",
                "events": [
                  {
                    "http": {
                      "path": "business",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-createBusiness",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "CreateBusinessLambdaVersioneOnzfdT2ywtuUHjnhM46aKscKXCMcebFqTDcmI0Svg"
              },
              "deleteBusiness": {
                "handler": "handlers/business/deleteBusiness.handler",
                "events": [
                  {
                    "http": {
                      "path": "business/{id}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-deleteBusiness",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "DeleteBusinessLambdaVersion959zZAST1AFCprkEunCUjDP3AEmJAqunEgHndVg7nBw"
              },
              "getBusinessName": {
                "handler": "handlers/business/getBusinessByName.handler",
                "events": [
                  {
                    "http": {
                      "path": "business/search",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getBusinessName",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetBusinessNameLambdaVersionfy3WYrmc4qpAetbuWZGYTxsicgJWi5SjTcOSuasyhk"
              },
              "updateBusiness": {
                "handler": "handlers/business/updateBusiness.handler",
                "events": [
                  {
                    "http": {
                      "path": "business/{id}",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-updateBusiness",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "UpdateBusinessLambdaVersionCv58oH5h3Lc85wG0Ge6lsYoQhbB3qU5fihwdvfDZw"
              },
              "getPostById": {
                "handler": "handlers/post/getPostById.handler",
                "events": [
                  {
                    "http": {
                      "path": "post/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getPostById",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetPostByIdLambdaVersionqK1iQJbUJSq1lnfuUF17ktTPSF4ImfSHrAOZHpYZW18"
              },
              "createPost": {
                "handler": "handlers/post/createPost.handler",
                "events": [
                  {
                    "http": {
                      "path": "post",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-createPost",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "CreatePostLambdaVersionQ3MXNJo2kb492VPAdPfw8iPdF9rmWN4hz4YyFOmknPg"
              },
              "deletePost": {
                "handler": "handlers/post/deletePost.handler",
                "events": [
                  {
                    "http": {
                      "path": "post/{id}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-deletePost",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "DeletePostLambdaVersionaenPdqu6xKUzPAbxMSIKQJ6qb6bflLp4lR4eZKTAQ"
              },
              "getFiltredPosts": {
                "handler": "handlers/post/getFilteredPosts.handler",
                "events": [
                  {
                    "http": {
                      "path": "post/filtred",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getFiltredPosts",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetFiltredPostsLambdaVersion8Pa2CBT7AMEJYr5IavQSeG0itqCE5WNWuqw91aFp0"
              },
              "getAvailablePosts": {
                "handler": "handlers/post/getAvailablePosts.handler",
                "events": [
                  {
                    "http": {
                      "path": "post/available",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getAvailablePosts",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetAvailablePostsLambdaVersionHTV9W5xRrvjnY9OqsIJQHIE1e8HREcNuzlrSrS2q8QA"
              },
              "createOffer": {
                "handler": "handlers/offer/createOffer.handler",
                "events": [
                  {
                    "http": {
                      "path": "offer",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-createOffer",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "CreateOfferLambdaVersionQBYhiFqMrdjrQNVWEogAQbY3osUWubJ6GlNXIqzGEsU"
              },
              "deleteOffer": {
                "handler": "handlers/offer/deleteOffer.handler",
                "events": [
                  {
                    "http": {
                      "path": "offer/{id}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-deleteOffer",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "DeleteOfferLambdaVersionEH2FmIConFPbQcMZ64xQm4OGLOR6InRZXDsTpNm7yE"
              },
              "getOfferById": {
                "handler": "handlers/offer/getOfferById.handler",
                "events": [
                  {
                    "http": {
                      "path": "offer/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getOfferById",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetOfferByIdLambdaVersionsL51Oe17mJNox2YsKJKAxXPkaesVgrl9ryWdPoyA"
              },
              "createCategory": {
                "handler": "handlers/categories/createCategory.handler",
                "events": [
                  {
                    "http": {
                      "path": "category",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-createCategory",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "CreateCategoryLambdaVersionyDWILpj8OPaI33LBa9bdYXzqPCVPoQf5s7fFNSFAR9M"
              },
              "deleteCategory": {
                "handler": "handlers/categories/deleteCategory.handler",
                "events": [
                  {
                    "http": {
                      "path": "category/{id}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-deleteCategory",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "DeleteCategoryLambdaVersionZuZm6lagWVvng5n0BZvd3iPOf8JUABrhVGRc4DnqQ"
              },
              "getCategoryById": {
                "handler": "handlers/categories/getCategoryById.handler",
                "events": [
                  {
                    "http": {
                      "path": "category/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getCategoryById",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetCategoryByIdLambdaVersionR7iNupptLs3CEyQKe9JddPh4E4jV0DRpkMJFK9IFP8"
              },
              "getAllCategories": {
                "handler": "handlers/categories/getAllCategories.handler",
                "events": [
                  {
                    "http": {
                      "path": "category/all",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getAllCategories",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetAllCategoriesLambdaVersiongZ3MDC9744VdW1PzgplsvodFM5CoFExYXHjQwleXowo"
              },
              "createJob": {
                "handler": "handlers/finishedJobs/createJob.handler",
                "events": [
                  {
                    "http": {
                      "path": "finishedJobs",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-createJob",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "CreateJobLambdaVersion5eCTJpcgefxBlepYwctOIDPfOgnAuNloBmrcHFfxk"
              },
              "getJobById": {
                "handler": "handlers/finishedJobs/getJobById.handler",
                "events": [
                  {
                    "http": {
                      "path": "finishedJobs/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getJobById",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetJobByIdLambdaVersionxnpnth090BFjJGEXdVr2VZk0EF3yQHM2u9gbfOS03M"
              },
              "createComment": {
                "handler": "handlers/comment/createComment.handler",
                "events": [
                  {
                    "http": {
                      "path": "comment",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-createComment",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "CreateCommentLambdaVersionvL54MBFlWuVOQ0wS5D1Xsv2D4gcppX8OMqdU5zRyPxQ"
              },
              "getCommentById": {
                "handler": "handlers/comment/getCommentById.handler",
                "events": [
                  {
                    "http": {
                      "path": "comment/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getCommentById",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetCommentByIdLambdaVersion3iFol9sZKJJLVeAl4JDEHNm80hXKZ7BNvejdG3BRg"
              },
              "deleteComment": {
                "handler": "handlers/comment/deleteComment.handler",
                "events": [
                  {
                    "http": {
                      "path": "comment/{id}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-deleteComment",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "DeleteCommentLambdaVersiond6ZiaUz2iy5caNvM2JqI209BiVBSxnGG2jKBA2pQ6Fo"
              },
              "createMessage": {
                "handler": "handlers/message/createMessage.handler",
                "events": [
                  {
                    "http": {
                      "path": "message",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-createMessage",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "CreateMessageLambdaVersionER0n2qIqAMUzUeS1vhcqU47kavn76GTf7ZRG69SZT8"
              },
              "getMessageById": {
                "handler": "handlers/message/getMessageById.handler",
                "events": [
                  {
                    "http": {
                      "path": "message/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getMessageById",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetMessageByIdLambdaVersionIlf4YcWFPPJfdAR8cpqpK1TX2l8WXsYVNtY6IR7o"
              },
              "createNotification": {
                "handler": "handlers/notification/createNotification.handler",
                "events": [
                  {
                    "http": {
                      "path": "notification",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-createNotification",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "CreateNotificationLambdaVersion7HTT24tRWeuVU8J6YxxaNGNAemQgpcJpyQqn937mg"
              },
              "getNotificationById": {
                "handler": "handlers/notification/getNotificationById.handler",
                "events": [
                  {
                    "http": {
                      "path": "notification/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getNotificationById",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetNotificationByIdLambdaVersionHyb6vZfsTIKXFA8zZY55lQTsyxWdPAZf7X73Mjs"
              },
              "createSubscriptionPlan": {
                "handler": "handlers/subscriptionPlan/createPlan.handler",
                "events": [
                  {
                    "http": {
                      "path": "subscriptionPlan",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-createSubscriptionPlan",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "CreateSubscriptionPlanLambdaVersioncMzbn1RcnCG5iHMMNtD1Undq64CjU1yrJYMVX6llu4"
              },
              "getSubscriptionPlan": {
                "handler": "handlers/subscriptionPlan/getPlanById.handler",
                "events": [
                  {
                    "http": {
                      "path": "subscriptionPlan/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getSubscriptionPlan",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetSubscriptionPlanLambdaVersion4VplnXM7srmv7nJ3tLvRPASzRlPnqud96sx4ztHfks"
              },
              "getAllSubscriptionPlans": {
                "handler": "handlers/subscriptionPlan/getAll.handler",
                "events": [
                  {
                    "http": {
                      "path": "subscriptionPlan/all",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getAllSubscriptionPlans",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetAllSubscriptionPlansLambdaVersion09pHQG2mxq702rQJ9VUJh5oCXVemg0A8AGUTXXyZgGk"
              },
              "deleteSubscriptionPlan": {
                "handler": "handlers/subscriptionPlan/deletePlan.handler",
                "events": [
                  {
                    "http": {
                      "path": "subscriptionPlan/{id}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-deleteSubscriptionPlan",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "DeleteSubscriptionPlanLambdaVersioniAAZd89xuTRCFWPjFrsUJBPujbkt1XWelZAPiiN84g"
              },
              "createSubscriptionManager": {
                "handler": "handlers/subscriptionManager/createManager.handler",
                "events": [
                  {
                    "http": {
                      "path": "subscriptionManager",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-createSubscriptionManager",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "CreateSubscriptionManagerLambdaVersion4BVaYXQiWynVMdwaysC58jiHVjayD1rMo0hBHSkrus8"
              },
              "getSubscriptionManagerById": {
                "handler": "handlers/subscriptionManager/getManagerById.handler",
                "events": [
                  {
                    "http": {
                      "path": "subscriptionManager/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getSubscriptionManagerById",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetSubscriptionManagerByIdLambdaVersionKGLpHVSs4vj9MFzNfEbTiawUrKnw0wAlKtY2wxNfWc"
              },
              "updateSubscriptionManager": {
                "handler": "handlers/subscriptionManager/updateManager.handler",
                "events": [
                  {
                    "http": {
                      "path": "subscriptionManager/{id}",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-updateSubscriptionManager",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "UpdateSubscriptionManagerLambdaVersionqRjeX2ZzStF1Qu4f6rCxPsMgrKkf2bCuiY5vCfnFuXA"
              },
              "getSubscriptionManager": {
                "handler": "handlers/subscriptionManager/getSubscriptionManager.handler",
                "events": [
                  {
                    "http": {
                      "path": "subscriptionManager/business/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getSubscriptionManager",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetSubscriptionManagerLambdaVersionNh2KQHecAYT8ErnfGOLiCzfUQUNzpW3SwtSIMfYDJ20"
              },
              "createPaymentTransaction": {
                "handler": "handlers/paymentTransaction/createPayment.handler",
                "events": [
                  {
                    "http": {
                      "path": "paymentTransaction",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-createPaymentTransaction",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "CreatePaymentTransactionLambdaVersionBPpqa6AjQBH2hZ6M0RIIYovmUgpdRU8wz7cL0uNbQ"
              },
              "getPaymentTransaction": {
                "handler": "handlers/paymentTransaction/getPaymentById.handler",
                "events": [
                  {
                    "http": {
                      "path": "paymentTransaction/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "interio-service-dev-getPaymentTransaction",
                "package": {},
                "memory": 128,
                "timeout": 6,
                "runtime": "nodejs16.x",
                "vpc": {},
                "versionLogicalId": "GetPaymentTransactionLambdaVersion4ktyDE4oOOjkVcosMqGT8nqzKtis0QzN9REQoLfrUno"
              }
            }
          },
          "configFileDirPath": "C:\\Users\\User\\Documents\\GitHub\\Interio-Backend",
          "config": {
            "type": "env"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:env",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\User\\Documents\\GitHub\\Interio-Backend",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "taleas1",
      "app": "interio",
      "service": "interio-service",
      "provider": {
        "name": "aws",
        "runtime": "nodejs16.x",
        "stage": "dev",
        "region": "eu-central-1",
        "memorySize": 128,
        "environment": {
          "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getUser"
              }
            },
            "CreateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-createUser"
              }
            },
            "DeleteUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-deleteUser"
              }
            },
            "GetUserNameLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getUserName"
              }
            },
            "UpdateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-updateUser"
              }
            },
            "GetBusinessByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getBusinessById"
              }
            },
            "CreateBusinessLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-createBusiness"
              }
            },
            "DeleteBusinessLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-deleteBusiness"
              }
            },
            "GetBusinessNameLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getBusinessName"
              }
            },
            "UpdateBusinessLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-updateBusiness"
              }
            },
            "GetPostByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getPostById"
              }
            },
            "CreatePostLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-createPost"
              }
            },
            "DeletePostLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-deletePost"
              }
            },
            "GetFiltredPostsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getFiltredPosts"
              }
            },
            "GetAvailablePostsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getAvailablePosts"
              }
            },
            "CreateOfferLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-createOffer"
              }
            },
            "DeleteOfferLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-deleteOffer"
              }
            },
            "GetOfferByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getOfferById"
              }
            },
            "CreateCategoryLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-createCategory"
              }
            },
            "DeleteCategoryLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-deleteCategory"
              }
            },
            "GetCategoryByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getCategoryById"
              }
            },
            "GetAllCategoriesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getAllCategories"
              }
            },
            "CreateJobLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-createJob"
              }
            },
            "GetJobByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getJobById"
              }
            },
            "CreateCommentLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-createComment"
              }
            },
            "GetCommentByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getCommentById"
              }
            },
            "DeleteCommentLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-deleteComment"
              }
            },
            "CreateMessageLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-createMessage"
              }
            },
            "GetMessageByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getMessageById"
              }
            },
            "CreateNotificationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-createNotification"
              }
            },
            "GetNotificationByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getNotificationById"
              }
            },
            "CreateSubscriptionPlanLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-createSubscriptionPlan"
              }
            },
            "GetSubscriptionPlanLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getSubscriptionPlan"
              }
            },
            "GetAllSubscriptionPlansLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getAllSubscriptionPlans"
              }
            },
            "DeleteSubscriptionPlanLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-deleteSubscriptionPlan"
              }
            },
            "CreateSubscriptionManagerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-createSubscriptionManager"
              }
            },
            "GetSubscriptionManagerByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getSubscriptionManagerById"
              }
            },
            "UpdateSubscriptionManagerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-updateSubscriptionManager"
              }
            },
            "GetSubscriptionManagerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getSubscriptionManager"
              }
            },
            "CreatePaymentTransactionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-createPaymentTransaction"
              }
            },
            "GetPaymentTransactionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/interio-service-dev-getPaymentTransaction"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "interio-service",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/interio-service-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/interio-service-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "interio-service",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/user/getUserById.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getUser",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserLogGroup"
              ]
            },
            "CreateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/user/createUser.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-createUser",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateUserLogGroup"
              ]
            },
            "DeleteUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/user/deleteUser.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-deleteUser",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteUserLogGroup"
              ]
            },
            "GetUserNameLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/user/getUserByName.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getUserName",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserNameLogGroup"
              ]
            },
            "UpdateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/user/updateUser.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-updateUser",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateUserLogGroup"
              ]
            },
            "GetBusinessByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/business/getBusinessById.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getBusinessById",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetBusinessByIdLogGroup"
              ]
            },
            "CreateBusinessLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/business/createBusiness.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-createBusiness",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateBusinessLogGroup"
              ]
            },
            "DeleteBusinessLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/business/deleteBusiness.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-deleteBusiness",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteBusinessLogGroup"
              ]
            },
            "GetBusinessNameLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/business/getBusinessByName.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getBusinessName",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetBusinessNameLogGroup"
              ]
            },
            "UpdateBusinessLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/business/updateBusiness.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-updateBusiness",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateBusinessLogGroup"
              ]
            },
            "GetPostByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/post/getPostById.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getPostById",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPostByIdLogGroup"
              ]
            },
            "CreatePostLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/post/createPost.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-createPost",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreatePostLogGroup"
              ]
            },
            "DeletePostLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/post/deletePost.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-deletePost",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeletePostLogGroup"
              ]
            },
            "GetFiltredPostsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/post/getFilteredPosts.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getFiltredPosts",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetFiltredPostsLogGroup"
              ]
            },
            "GetAvailablePostsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/post/getAvailablePosts.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getAvailablePosts",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAvailablePostsLogGroup"
              ]
            },
            "CreateOfferLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/offer/createOffer.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-createOffer",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateOfferLogGroup"
              ]
            },
            "DeleteOfferLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/offer/deleteOffer.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-deleteOffer",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteOfferLogGroup"
              ]
            },
            "GetOfferByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/offer/getOfferById.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getOfferById",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetOfferByIdLogGroup"
              ]
            },
            "CreateCategoryLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/categories/createCategory.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-createCategory",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateCategoryLogGroup"
              ]
            },
            "DeleteCategoryLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/categories/deleteCategory.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-deleteCategory",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteCategoryLogGroup"
              ]
            },
            "GetCategoryByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/categories/getCategoryById.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getCategoryById",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetCategoryByIdLogGroup"
              ]
            },
            "GetAllCategoriesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/categories/getAllCategories.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getAllCategories",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllCategoriesLogGroup"
              ]
            },
            "CreateJobLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/finishedJobs/createJob.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-createJob",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateJobLogGroup"
              ]
            },
            "GetJobByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/finishedJobs/getJobById.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getJobById",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetJobByIdLogGroup"
              ]
            },
            "CreateCommentLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/comment/createComment.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-createComment",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateCommentLogGroup"
              ]
            },
            "GetCommentByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/comment/getCommentById.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getCommentById",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetCommentByIdLogGroup"
              ]
            },
            "DeleteCommentLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/comment/deleteComment.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-deleteComment",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteCommentLogGroup"
              ]
            },
            "CreateMessageLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/message/createMessage.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-createMessage",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateMessageLogGroup"
              ]
            },
            "GetMessageByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/message/getMessageById.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getMessageById",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetMessageByIdLogGroup"
              ]
            },
            "CreateNotificationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/notification/createNotification.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-createNotification",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateNotificationLogGroup"
              ]
            },
            "GetNotificationByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/notification/getNotificationById.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getNotificationById",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetNotificationByIdLogGroup"
              ]
            },
            "CreateSubscriptionPlanLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/subscriptionPlan/createPlan.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-createSubscriptionPlan",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateSubscriptionPlanLogGroup"
              ]
            },
            "GetSubscriptionPlanLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/subscriptionPlan/getPlanById.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getSubscriptionPlan",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetSubscriptionPlanLogGroup"
              ]
            },
            "GetAllSubscriptionPlansLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/subscriptionPlan/getAll.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getAllSubscriptionPlans",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllSubscriptionPlansLogGroup"
              ]
            },
            "DeleteSubscriptionPlanLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/subscriptionPlan/deletePlan.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-deleteSubscriptionPlan",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteSubscriptionPlanLogGroup"
              ]
            },
            "CreateSubscriptionManagerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/subscriptionManager/createManager.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-createSubscriptionManager",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateSubscriptionManagerLogGroup"
              ]
            },
            "GetSubscriptionManagerByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/subscriptionManager/getManagerById.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getSubscriptionManagerById",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetSubscriptionManagerByIdLogGroup"
              ]
            },
            "UpdateSubscriptionManagerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/subscriptionManager/updateManager.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-updateSubscriptionManager",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateSubscriptionManagerLogGroup"
              ]
            },
            "GetSubscriptionManagerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/subscriptionManager/getSubscriptionManager.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getSubscriptionManager",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetSubscriptionManagerLogGroup"
              ]
            },
            "CreatePaymentTransactionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/paymentTransaction/createPayment.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-createPaymentTransaction",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreatePaymentTransactionLogGroup"
              ]
            },
            "GetPaymentTransactionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                  "S3Key": "serverless/interio-service/dev/1729612122995-2024-10-22T15:48:42.995Z/interio-service.zip"
                },
                "Handler": "handlers/paymentTransaction/getPaymentById.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "interio-service-dev-getPaymentTransaction",
                "MemorySize": 128,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPaymentTransactionLogGroup"
              ]
            },
            "GetUserLambdaVersionLVaLQwtzET3Z6MzkXFNwDjLa5EGD0m6Guo9kwJqtNs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "CreateUserLambdaVersiondiPNlpA28vAeQbOUknDXgriD9NbxM0UqW0qWOue0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateUserLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "DeleteUserLambdaVersionqPfCeY4pIAhD6VUNHmTH0hBnqx8JD3we07rcMvI8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteUserLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetUserNameLambdaVersionoCIHJdvK6gjKXtn2sziel5dmuG5mR3sPrsBhxyZEI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserNameLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "UpdateUserLambdaVersionEC9hsnvpB3Vr4S3lmLJX7fDmoojLWq7Ec6pYpzHmSQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateUserLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetBusinessByIdLambdaVersionm0VKkEqOZfvqA3sbwwzeZ0uh7km3N9vby9rcjWFWA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetBusinessByIdLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "CreateBusinessLambdaVersioneOnzfdT2ywtuUHjnhM46aKscKXCMcebFqTDcmI0Svg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateBusinessLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "DeleteBusinessLambdaVersion959zZAST1AFCprkEunCUjDP3AEmJAqunEgHndVg7nBw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteBusinessLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetBusinessNameLambdaVersionfy3WYrmc4qpAetbuWZGYTxsicgJWi5SjTcOSuasyhk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetBusinessNameLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "UpdateBusinessLambdaVersionCv58oH5h3Lc85wG0Ge6lsYoQhbB3qU5fihwdvfDZw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateBusinessLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetPostByIdLambdaVersionqK1iQJbUJSq1lnfuUF17ktTPSF4ImfSHrAOZHpYZW18": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPostByIdLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "CreatePostLambdaVersionQ3MXNJo2kb492VPAdPfw8iPdF9rmWN4hz4YyFOmknPg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreatePostLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "DeletePostLambdaVersionaenPdqu6xKUzPAbxMSIKQJ6qb6bflLp4lR4eZKTAQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeletePostLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetFiltredPostsLambdaVersion8Pa2CBT7AMEJYr5IavQSeG0itqCE5WNWuqw91aFp0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetFiltredPostsLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetAvailablePostsLambdaVersionHTV9W5xRrvjnY9OqsIJQHIE1e8HREcNuzlrSrS2q8QA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAvailablePostsLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "CreateOfferLambdaVersionQBYhiFqMrdjrQNVWEogAQbY3osUWubJ6GlNXIqzGEsU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateOfferLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "DeleteOfferLambdaVersionEH2FmIConFPbQcMZ64xQm4OGLOR6InRZXDsTpNm7yE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteOfferLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetOfferByIdLambdaVersionsL51Oe17mJNox2YsKJKAxXPkaesVgrl9ryWdPoyA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetOfferByIdLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "CreateCategoryLambdaVersionyDWILpj8OPaI33LBa9bdYXzqPCVPoQf5s7fFNSFAR9M": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateCategoryLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "DeleteCategoryLambdaVersionZuZm6lagWVvng5n0BZvd3iPOf8JUABrhVGRc4DnqQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteCategoryLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetCategoryByIdLambdaVersionR7iNupptLs3CEyQKe9JddPh4E4jV0DRpkMJFK9IFP8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetCategoryByIdLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetAllCategoriesLambdaVersiongZ3MDC9744VdW1PzgplsvodFM5CoFExYXHjQwleXowo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllCategoriesLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "CreateJobLambdaVersion5eCTJpcgefxBlepYwctOIDPfOgnAuNloBmrcHFfxk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateJobLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetJobByIdLambdaVersionxnpnth090BFjJGEXdVr2VZk0EF3yQHM2u9gbfOS03M": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetJobByIdLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "CreateCommentLambdaVersionvL54MBFlWuVOQ0wS5D1Xsv2D4gcppX8OMqdU5zRyPxQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateCommentLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetCommentByIdLambdaVersion3iFol9sZKJJLVeAl4JDEHNm80hXKZ7BNvejdG3BRg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetCommentByIdLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "DeleteCommentLambdaVersiond6ZiaUz2iy5caNvM2JqI209BiVBSxnGG2jKBA2pQ6Fo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteCommentLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "CreateMessageLambdaVersionER0n2qIqAMUzUeS1vhcqU47kavn76GTf7ZRG69SZT8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateMessageLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetMessageByIdLambdaVersionIlf4YcWFPPJfdAR8cpqpK1TX2l8WXsYVNtY6IR7o": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetMessageByIdLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "CreateNotificationLambdaVersion7HTT24tRWeuVU8J6YxxaNGNAemQgpcJpyQqn937mg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateNotificationLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetNotificationByIdLambdaVersionHyb6vZfsTIKXFA8zZY55lQTsyxWdPAZf7X73Mjs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetNotificationByIdLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "CreateSubscriptionPlanLambdaVersioncMzbn1RcnCG5iHMMNtD1Undq64CjU1yrJYMVX6llu4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateSubscriptionPlanLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetSubscriptionPlanLambdaVersion4VplnXM7srmv7nJ3tLvRPASzRlPnqud96sx4ztHfks": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetSubscriptionPlanLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetAllSubscriptionPlansLambdaVersion09pHQG2mxq702rQJ9VUJh5oCXVemg0A8AGUTXXyZgGk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllSubscriptionPlansLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "DeleteSubscriptionPlanLambdaVersioniAAZd89xuTRCFWPjFrsUJBPujbkt1XWelZAPiiN84g": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteSubscriptionPlanLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "CreateSubscriptionManagerLambdaVersion4BVaYXQiWynVMdwaysC58jiHVjayD1rMo0hBHSkrus8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateSubscriptionManagerLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetSubscriptionManagerByIdLambdaVersionKGLpHVSs4vj9MFzNfEbTiawUrKnw0wAlKtY2wxNfWc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetSubscriptionManagerByIdLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "UpdateSubscriptionManagerLambdaVersionqRjeX2ZzStF1Qu4f6rCxPsMgrKkf2bCuiY5vCfnFuXA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateSubscriptionManagerLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetSubscriptionManagerLambdaVersionNh2KQHecAYT8ErnfGOLiCzfUQUNzpW3SwtSIMfYDJ20": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetSubscriptionManagerLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "CreatePaymentTransactionLambdaVersionBPpqa6AjQBH2hZ6M0RIIYovmUgpdRU8wz7cL0uNbQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreatePaymentTransactionLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "GetPaymentTransactionLambdaVersion4ktyDE4oOOjkVcosMqGT8nqzKtis0QzN9REQoLfrUno": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPaymentTransactionLambdaFunction"
                },
                "CodeSha256": "4WUL15u+PeLQzmrOrq7wSWZn0eHolWvCRPiZLBbjd2g="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-interio-service",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceUser": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "user",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserSearch": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "search",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBusiness": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "business",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBusinessIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceBusiness"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBusinessSearch": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceBusiness"
                },
                "PathPart": "search",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePost": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "post",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePost"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostFiltred": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePost"
                },
                "PathPart": "filtred",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostAvailable": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePost"
                },
                "PathPart": "available",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceOffer": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "offer",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceOfferIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceOffer"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceCategory": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "category",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceCategoryIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceCategory"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceCategoryAll": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceCategory"
                },
                "PathPart": "all",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceFinishedjobs": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "finishedJobs",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceFinishedjobsIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceFinishedjobs"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceComment": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "comment",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceCommentIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceComment"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMessage": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "message",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMessageIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMessage"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceNotification": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "notification",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceNotificationIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceNotification"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSubscriptionplan": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "subscriptionPlan",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSubscriptionplanIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceSubscriptionplan"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSubscriptionplanAll": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceSubscriptionplan"
                },
                "PathPart": "all",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSubscriptionmanager": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "subscriptionManager",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSubscriptionmanagerIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceSubscriptionmanager"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSubscriptionmanagerBusiness": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceSubscriptionmanager"
                },
                "PathPart": "business",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSubscriptionmanagerBusinessIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceSubscriptionmanagerBusiness"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePaymenttransaction": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "paymentTransaction",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePaymenttransactionIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePaymenttransaction"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,DELETE,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserSearchOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserSearch"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodBusinessIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,DELETE,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBusinessIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodBusinessOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBusiness"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodBusinessSearchOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBusinessSearch"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePost"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostFiltredOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostFiltred"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostAvailableOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostAvailable"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodOfferOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOffer"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodOfferIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOfferIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodCategoryOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCategory"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodCategoryIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCategoryIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodCategoryAllOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCategoryAll"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodFinishedjobsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceFinishedjobs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodFinishedjobsIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceFinishedjobsIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodCommentOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceComment"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodCommentIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCommentIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMessageOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessage"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMessageIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessageIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodNotificationOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceNotification"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodNotificationIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceNotificationIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSubscriptionplanOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionplan"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSubscriptionplanIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionplanIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSubscriptionplanAllOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionplanAll"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSubscriptionmanagerOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionmanager"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSubscriptionmanagerIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionmanagerIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSubscriptionmanagerBusinessIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionmanagerBusinessIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPaymenttransactionOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePaymenttransaction"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPaymenttransactionIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePaymenttransactionIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserSearchGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserSearch"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserNameLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserNameLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserIdVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodBusinessIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBusinessIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetBusinessByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetBusinessByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodBusinessPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBusiness"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateBusinessLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateBusinessLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodBusinessIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBusinessIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteBusinessLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteBusinessLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodBusinessSearchGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBusinessSearch"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetBusinessNameLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetBusinessNameLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodBusinessIdVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBusinessIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateBusinessLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateBusinessLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPostByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetPostByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePost"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreatePostLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreatePostLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeletePostLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeletePostLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostFiltredGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostFiltred"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetFiltredPostsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetFiltredPostsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostAvailableGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostAvailable"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAvailablePostsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAvailablePostsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOfferPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOffer"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateOfferLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateOfferLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOfferIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOfferIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteOfferLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteOfferLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOfferIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOfferIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetOfferByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetOfferByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodCategoryPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCategory"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateCategoryLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateCategoryLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodCategoryIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCategoryIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteCategoryLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteCategoryLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodCategoryIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCategoryIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetCategoryByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetCategoryByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodCategoryAllGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCategoryAll"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAllCategoriesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAllCategoriesLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodFinishedjobsPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceFinishedjobs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateJobLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateJobLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodFinishedjobsIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceFinishedjobsIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetJobByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetJobByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodCommentPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceComment"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateCommentLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateCommentLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodCommentIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCommentIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetCommentByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetCommentByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodCommentIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCommentIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteCommentLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteCommentLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMessagePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessage"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateMessageLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateMessageLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMessageIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessageIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetMessageByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetMessageByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodNotificationPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceNotification"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateNotificationLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateNotificationLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodNotificationIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceNotificationIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetNotificationByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetNotificationByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSubscriptionplanPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionplan"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateSubscriptionPlanLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateSubscriptionPlanLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSubscriptionplanIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionplanIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetSubscriptionPlanLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetSubscriptionPlanLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSubscriptionplanAllGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionplanAll"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAllSubscriptionPlansLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAllSubscriptionPlansLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSubscriptionplanIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionplanIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteSubscriptionPlanLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteSubscriptionPlanLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSubscriptionmanagerPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionmanager"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateSubscriptionManagerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateSubscriptionManagerLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSubscriptionmanagerIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionmanagerIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetSubscriptionManagerByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetSubscriptionManagerByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSubscriptionmanagerIdVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionmanagerIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateSubscriptionManagerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateSubscriptionManagerLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSubscriptionmanagerBusinessIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSubscriptionmanagerBusinessIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetSubscriptionManagerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetSubscriptionManagerLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPaymenttransactionPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePaymenttransaction"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreatePaymentTransactionLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreatePaymentTransactionLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPaymenttransactionIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePaymenttransactionIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPaymentTransactionLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetPaymentTransactionLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1729612119549": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodUserIdVarOptions",
                "ApiGatewayMethodUserOptions",
                "ApiGatewayMethodUserSearchOptions",
                "ApiGatewayMethodBusinessIdVarOptions",
                "ApiGatewayMethodBusinessOptions",
                "ApiGatewayMethodBusinessSearchOptions",
                "ApiGatewayMethodPostIdVarOptions",
                "ApiGatewayMethodPostOptions",
                "ApiGatewayMethodPostFiltredOptions",
                "ApiGatewayMethodPostAvailableOptions",
                "ApiGatewayMethodOfferOptions",
                "ApiGatewayMethodOfferIdVarOptions",
                "ApiGatewayMethodCategoryOptions",
                "ApiGatewayMethodCategoryIdVarOptions",
                "ApiGatewayMethodCategoryAllOptions",
                "ApiGatewayMethodFinishedjobsOptions",
                "ApiGatewayMethodFinishedjobsIdVarOptions",
                "ApiGatewayMethodCommentOptions",
                "ApiGatewayMethodCommentIdVarOptions",
                "ApiGatewayMethodMessageOptions",
                "ApiGatewayMethodMessageIdVarOptions",
                "ApiGatewayMethodNotificationOptions",
                "ApiGatewayMethodNotificationIdVarOptions",
                "ApiGatewayMethodSubscriptionplanOptions",
                "ApiGatewayMethodSubscriptionplanIdVarOptions",
                "ApiGatewayMethodSubscriptionplanAllOptions",
                "ApiGatewayMethodSubscriptionmanagerOptions",
                "ApiGatewayMethodSubscriptionmanagerIdVarOptions",
                "ApiGatewayMethodSubscriptionmanagerBusinessIdVarOptions",
                "ApiGatewayMethodPaymenttransactionOptions",
                "ApiGatewayMethodPaymenttransactionIdVarOptions",
                "ApiGatewayMethodUserIdVarGet",
                "ApiGatewayMethodUserPost",
                "ApiGatewayMethodUserIdVarDelete",
                "ApiGatewayMethodUserSearchGet",
                "ApiGatewayMethodUserIdVarPut",
                "ApiGatewayMethodBusinessIdVarGet",
                "ApiGatewayMethodBusinessPost",
                "ApiGatewayMethodBusinessIdVarDelete",
                "ApiGatewayMethodBusinessSearchGet",
                "ApiGatewayMethodBusinessIdVarPut",
                "ApiGatewayMethodPostIdVarGet",
                "ApiGatewayMethodPostPost",
                "ApiGatewayMethodPostIdVarDelete",
                "ApiGatewayMethodPostFiltredGet",
                "ApiGatewayMethodPostAvailableGet",
                "ApiGatewayMethodOfferPost",
                "ApiGatewayMethodOfferIdVarDelete",
                "ApiGatewayMethodOfferIdVarGet",
                "ApiGatewayMethodCategoryPost",
                "ApiGatewayMethodCategoryIdVarDelete",
                "ApiGatewayMethodCategoryIdVarGet",
                "ApiGatewayMethodCategoryAllGet",
                "ApiGatewayMethodFinishedjobsPost",
                "ApiGatewayMethodFinishedjobsIdVarGet",
                "ApiGatewayMethodCommentPost",
                "ApiGatewayMethodCommentIdVarGet",
                "ApiGatewayMethodCommentIdVarDelete",
                "ApiGatewayMethodMessagePost",
                "ApiGatewayMethodMessageIdVarGet",
                "ApiGatewayMethodNotificationPost",
                "ApiGatewayMethodNotificationIdVarGet",
                "ApiGatewayMethodSubscriptionplanPost",
                "ApiGatewayMethodSubscriptionplanIdVarGet",
                "ApiGatewayMethodSubscriptionplanAllGet",
                "ApiGatewayMethodSubscriptionplanIdVarDelete",
                "ApiGatewayMethodSubscriptionmanagerPost",
                "ApiGatewayMethodSubscriptionmanagerIdVarGet",
                "ApiGatewayMethodSubscriptionmanagerIdVarPut",
                "ApiGatewayMethodSubscriptionmanagerBusinessIdVarGet",
                "ApiGatewayMethodPaymenttransactionPost",
                "ApiGatewayMethodPaymenttransactionIdVarGet"
              ]
            },
            "GetUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserNameLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserNameLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetBusinessByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetBusinessByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateBusinessLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateBusinessLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteBusinessLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteBusinessLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetBusinessNameLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetBusinessNameLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateBusinessLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateBusinessLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetPostByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPostByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreatePostLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreatePostLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeletePostLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeletePostLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetFiltredPostsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetFiltredPostsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAvailablePostsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAvailablePostsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateOfferLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateOfferLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteOfferLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteOfferLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetOfferByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetOfferByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateCategoryLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateCategoryLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteCategoryLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteCategoryLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetCategoryByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetCategoryByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAllCategoriesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllCategoriesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateJobLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateJobLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetJobByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetJobByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateCommentLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateCommentLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetCommentByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetCommentByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteCommentLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteCommentLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateMessageLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateMessageLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetMessageByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetMessageByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateNotificationLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateNotificationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetNotificationByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetNotificationByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateSubscriptionPlanLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateSubscriptionPlanLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetSubscriptionPlanLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetSubscriptionPlanLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAllSubscriptionPlansLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllSubscriptionPlansLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteSubscriptionPlanLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteSubscriptionPlanLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateSubscriptionManagerLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateSubscriptionManagerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetSubscriptionManagerByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetSubscriptionManagerByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateSubscriptionManagerLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateSubscriptionManagerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetSubscriptionManagerLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetSubscriptionManagerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreatePaymentTransactionLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreatePaymentTransactionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetPaymentTransactionLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPaymentTransactionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
              "Export": {
                "Name": "sls-interio-service-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserLambdaVersionLVaLQwtzET3Z6MzkXFNwDjLa5EGD0m6Guo9kwJqtNs"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetUserLambdaFunctionQualifiedArn"
              }
            },
            "CreateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateUserLambdaVersiondiPNlpA28vAeQbOUknDXgriD9NbxM0UqW0qWOue0"
              },
              "Export": {
                "Name": "sls-interio-service-dev-CreateUserLambdaFunctionQualifiedArn"
              }
            },
            "DeleteUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteUserLambdaVersionqPfCeY4pIAhD6VUNHmTH0hBnqx8JD3we07rcMvI8"
              },
              "Export": {
                "Name": "sls-interio-service-dev-DeleteUserLambdaFunctionQualifiedArn"
              }
            },
            "GetUserNameLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserNameLambdaVersionoCIHJdvK6gjKXtn2sziel5dmuG5mR3sPrsBhxyZEI"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetUserNameLambdaFunctionQualifiedArn"
              }
            },
            "UpdateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateUserLambdaVersionEC9hsnvpB3Vr4S3lmLJX7fDmoojLWq7Ec6pYpzHmSQ"
              },
              "Export": {
                "Name": "sls-interio-service-dev-UpdateUserLambdaFunctionQualifiedArn"
              }
            },
            "GetBusinessByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetBusinessByIdLambdaVersionm0VKkEqOZfvqA3sbwwzeZ0uh7km3N9vby9rcjWFWA"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetBusinessByIdLambdaFunctionQualifiedArn"
              }
            },
            "CreateBusinessLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateBusinessLambdaVersioneOnzfdT2ywtuUHjnhM46aKscKXCMcebFqTDcmI0Svg"
              },
              "Export": {
                "Name": "sls-interio-service-dev-CreateBusinessLambdaFunctionQualifiedArn"
              }
            },
            "DeleteBusinessLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteBusinessLambdaVersion959zZAST1AFCprkEunCUjDP3AEmJAqunEgHndVg7nBw"
              },
              "Export": {
                "Name": "sls-interio-service-dev-DeleteBusinessLambdaFunctionQualifiedArn"
              }
            },
            "GetBusinessNameLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetBusinessNameLambdaVersionfy3WYrmc4qpAetbuWZGYTxsicgJWi5SjTcOSuasyhk"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetBusinessNameLambdaFunctionQualifiedArn"
              }
            },
            "UpdateBusinessLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateBusinessLambdaVersionCv58oH5h3Lc85wG0Ge6lsYoQhbB3qU5fihwdvfDZw"
              },
              "Export": {
                "Name": "sls-interio-service-dev-UpdateBusinessLambdaFunctionQualifiedArn"
              }
            },
            "GetPostByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPostByIdLambdaVersionqK1iQJbUJSq1lnfuUF17ktTPSF4ImfSHrAOZHpYZW18"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetPostByIdLambdaFunctionQualifiedArn"
              }
            },
            "CreatePostLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreatePostLambdaVersionQ3MXNJo2kb492VPAdPfw8iPdF9rmWN4hz4YyFOmknPg"
              },
              "Export": {
                "Name": "sls-interio-service-dev-CreatePostLambdaFunctionQualifiedArn"
              }
            },
            "DeletePostLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeletePostLambdaVersionaenPdqu6xKUzPAbxMSIKQJ6qb6bflLp4lR4eZKTAQ"
              },
              "Export": {
                "Name": "sls-interio-service-dev-DeletePostLambdaFunctionQualifiedArn"
              }
            },
            "GetFiltredPostsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetFiltredPostsLambdaVersion8Pa2CBT7AMEJYr5IavQSeG0itqCE5WNWuqw91aFp0"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetFiltredPostsLambdaFunctionQualifiedArn"
              }
            },
            "GetAvailablePostsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAvailablePostsLambdaVersionHTV9W5xRrvjnY9OqsIJQHIE1e8HREcNuzlrSrS2q8QA"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetAvailablePostsLambdaFunctionQualifiedArn"
              }
            },
            "CreateOfferLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateOfferLambdaVersionQBYhiFqMrdjrQNVWEogAQbY3osUWubJ6GlNXIqzGEsU"
              },
              "Export": {
                "Name": "sls-interio-service-dev-CreateOfferLambdaFunctionQualifiedArn"
              }
            },
            "DeleteOfferLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteOfferLambdaVersionEH2FmIConFPbQcMZ64xQm4OGLOR6InRZXDsTpNm7yE"
              },
              "Export": {
                "Name": "sls-interio-service-dev-DeleteOfferLambdaFunctionQualifiedArn"
              }
            },
            "GetOfferByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetOfferByIdLambdaVersionsL51Oe17mJNox2YsKJKAxXPkaesVgrl9ryWdPoyA"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetOfferByIdLambdaFunctionQualifiedArn"
              }
            },
            "CreateCategoryLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateCategoryLambdaVersionyDWILpj8OPaI33LBa9bdYXzqPCVPoQf5s7fFNSFAR9M"
              },
              "Export": {
                "Name": "sls-interio-service-dev-CreateCategoryLambdaFunctionQualifiedArn"
              }
            },
            "DeleteCategoryLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteCategoryLambdaVersionZuZm6lagWVvng5n0BZvd3iPOf8JUABrhVGRc4DnqQ"
              },
              "Export": {
                "Name": "sls-interio-service-dev-DeleteCategoryLambdaFunctionQualifiedArn"
              }
            },
            "GetCategoryByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetCategoryByIdLambdaVersionR7iNupptLs3CEyQKe9JddPh4E4jV0DRpkMJFK9IFP8"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetCategoryByIdLambdaFunctionQualifiedArn"
              }
            },
            "GetAllCategoriesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllCategoriesLambdaVersiongZ3MDC9744VdW1PzgplsvodFM5CoFExYXHjQwleXowo"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetAllCategoriesLambdaFunctionQualifiedArn"
              }
            },
            "CreateJobLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateJobLambdaVersion5eCTJpcgefxBlepYwctOIDPfOgnAuNloBmrcHFfxk"
              },
              "Export": {
                "Name": "sls-interio-service-dev-CreateJobLambdaFunctionQualifiedArn"
              }
            },
            "GetJobByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetJobByIdLambdaVersionxnpnth090BFjJGEXdVr2VZk0EF3yQHM2u9gbfOS03M"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetJobByIdLambdaFunctionQualifiedArn"
              }
            },
            "CreateCommentLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateCommentLambdaVersionvL54MBFlWuVOQ0wS5D1Xsv2D4gcppX8OMqdU5zRyPxQ"
              },
              "Export": {
                "Name": "sls-interio-service-dev-CreateCommentLambdaFunctionQualifiedArn"
              }
            },
            "GetCommentByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetCommentByIdLambdaVersion3iFol9sZKJJLVeAl4JDEHNm80hXKZ7BNvejdG3BRg"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetCommentByIdLambdaFunctionQualifiedArn"
              }
            },
            "DeleteCommentLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteCommentLambdaVersiond6ZiaUz2iy5caNvM2JqI209BiVBSxnGG2jKBA2pQ6Fo"
              },
              "Export": {
                "Name": "sls-interio-service-dev-DeleteCommentLambdaFunctionQualifiedArn"
              }
            },
            "CreateMessageLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateMessageLambdaVersionER0n2qIqAMUzUeS1vhcqU47kavn76GTf7ZRG69SZT8"
              },
              "Export": {
                "Name": "sls-interio-service-dev-CreateMessageLambdaFunctionQualifiedArn"
              }
            },
            "GetMessageByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetMessageByIdLambdaVersionIlf4YcWFPPJfdAR8cpqpK1TX2l8WXsYVNtY6IR7o"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetMessageByIdLambdaFunctionQualifiedArn"
              }
            },
            "CreateNotificationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateNotificationLambdaVersion7HTT24tRWeuVU8J6YxxaNGNAemQgpcJpyQqn937mg"
              },
              "Export": {
                "Name": "sls-interio-service-dev-CreateNotificationLambdaFunctionQualifiedArn"
              }
            },
            "GetNotificationByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetNotificationByIdLambdaVersionHyb6vZfsTIKXFA8zZY55lQTsyxWdPAZf7X73Mjs"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetNotificationByIdLambdaFunctionQualifiedArn"
              }
            },
            "CreateSubscriptionPlanLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateSubscriptionPlanLambdaVersioncMzbn1RcnCG5iHMMNtD1Undq64CjU1yrJYMVX6llu4"
              },
              "Export": {
                "Name": "sls-interio-service-dev-CreateSubscriptionPlanLambdaFunctionQualifiedArn"
              }
            },
            "GetSubscriptionPlanLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetSubscriptionPlanLambdaVersion4VplnXM7srmv7nJ3tLvRPASzRlPnqud96sx4ztHfks"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetSubscriptionPlanLambdaFunctionQualifiedArn"
              }
            },
            "GetAllSubscriptionPlansLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllSubscriptionPlansLambdaVersion09pHQG2mxq702rQJ9VUJh5oCXVemg0A8AGUTXXyZgGk"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetAllSubscriptionPlansLambdaFunctionQualifiedArn"
              }
            },
            "DeleteSubscriptionPlanLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteSubscriptionPlanLambdaVersioniAAZd89xuTRCFWPjFrsUJBPujbkt1XWelZAPiiN84g"
              },
              "Export": {
                "Name": "sls-interio-service-dev-DeleteSubscriptionPlanLambdaFunctionQualifiedArn"
              }
            },
            "CreateSubscriptionManagerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateSubscriptionManagerLambdaVersion4BVaYXQiWynVMdwaysC58jiHVjayD1rMo0hBHSkrus8"
              },
              "Export": {
                "Name": "sls-interio-service-dev-CreateSubscriptionManagerLambdaFunctionQualifiedArn"
              }
            },
            "GetSubscriptionManagerByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetSubscriptionManagerByIdLambdaVersionKGLpHVSs4vj9MFzNfEbTiawUrKnw0wAlKtY2wxNfWc"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetSubscriptionManagerByIdLambdaFunctionQualifiedArn"
              }
            },
            "UpdateSubscriptionManagerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateSubscriptionManagerLambdaVersionqRjeX2ZzStF1Qu4f6rCxPsMgrKkf2bCuiY5vCfnFuXA"
              },
              "Export": {
                "Name": "sls-interio-service-dev-UpdateSubscriptionManagerLambdaFunctionQualifiedArn"
              }
            },
            "GetSubscriptionManagerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetSubscriptionManagerLambdaVersionNh2KQHecAYT8ErnfGOLiCzfUQUNzpW3SwtSIMfYDJ20"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetSubscriptionManagerLambdaFunctionQualifiedArn"
              }
            },
            "CreatePaymentTransactionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreatePaymentTransactionLambdaVersionBPpqa6AjQBH2hZ6M0RIIYovmUgpdRU8wz7cL0uNbQ"
              },
              "Export": {
                "Name": "sls-interio-service-dev-CreatePaymentTransactionLambdaFunctionQualifiedArn"
              }
            },
            "GetPaymentTransactionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPaymentTransactionLambdaVersion4ktyDE4oOOjkVcosMqGT8nqzKtis0QzN9REQoLfrUno"
              },
              "Export": {
                "Name": "sls-interio-service-dev-GetPaymentTransactionLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-interio-service-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "getUser": {
          "handler": "handlers/user/getUserById.handler",
          "events": [
            {
              "http": {
                "path": "user/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getUser",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetUserLambdaVersionLVaLQwtzET3Z6MzkXFNwDjLa5EGD0m6Guo9kwJqtNs"
        },
        "createUser": {
          "handler": "handlers/user/createUser.handler",
          "events": [
            {
              "http": {
                "path": "user",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-createUser",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "CreateUserLambdaVersiondiPNlpA28vAeQbOUknDXgriD9NbxM0UqW0qWOue0"
        },
        "deleteUser": {
          "handler": "handlers/user/deleteUser.handler",
          "events": [
            {
              "http": {
                "path": "user/{id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-deleteUser",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "DeleteUserLambdaVersionqPfCeY4pIAhD6VUNHmTH0hBnqx8JD3we07rcMvI8"
        },
        "getUserName": {
          "handler": "handlers/user/getUserByName.handler",
          "events": [
            {
              "http": {
                "path": "user/search",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getUserName",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetUserNameLambdaVersionoCIHJdvK6gjKXtn2sziel5dmuG5mR3sPrsBhxyZEI"
        },
        "updateUser": {
          "handler": "handlers/user/updateUser.handler",
          "events": [
            {
              "http": {
                "path": "user/{id}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-updateUser",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "UpdateUserLambdaVersionEC9hsnvpB3Vr4S3lmLJX7fDmoojLWq7Ec6pYpzHmSQ"
        },
        "getBusinessById": {
          "handler": "handlers/business/getBusinessById.handler",
          "events": [
            {
              "http": {
                "path": "business/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getBusinessById",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetBusinessByIdLambdaVersionm0VKkEqOZfvqA3sbwwzeZ0uh7km3N9vby9rcjWFWA"
        },
        "createBusiness": {
          "handler": "handlers/business/createBusiness.handler",
          "events": [
            {
              "http": {
                "path": "business",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-createBusiness",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "CreateBusinessLambdaVersioneOnzfdT2ywtuUHjnhM46aKscKXCMcebFqTDcmI0Svg"
        },
        "deleteBusiness": {
          "handler": "handlers/business/deleteBusiness.handler",
          "events": [
            {
              "http": {
                "path": "business/{id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-deleteBusiness",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "DeleteBusinessLambdaVersion959zZAST1AFCprkEunCUjDP3AEmJAqunEgHndVg7nBw"
        },
        "getBusinessName": {
          "handler": "handlers/business/getBusinessByName.handler",
          "events": [
            {
              "http": {
                "path": "business/search",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getBusinessName",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetBusinessNameLambdaVersionfy3WYrmc4qpAetbuWZGYTxsicgJWi5SjTcOSuasyhk"
        },
        "updateBusiness": {
          "handler": "handlers/business/updateBusiness.handler",
          "events": [
            {
              "http": {
                "path": "business/{id}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-updateBusiness",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "UpdateBusinessLambdaVersionCv58oH5h3Lc85wG0Ge6lsYoQhbB3qU5fihwdvfDZw"
        },
        "getPostById": {
          "handler": "handlers/post/getPostById.handler",
          "events": [
            {
              "http": {
                "path": "post/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getPostById",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetPostByIdLambdaVersionqK1iQJbUJSq1lnfuUF17ktTPSF4ImfSHrAOZHpYZW18"
        },
        "createPost": {
          "handler": "handlers/post/createPost.handler",
          "events": [
            {
              "http": {
                "path": "post",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-createPost",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "CreatePostLambdaVersionQ3MXNJo2kb492VPAdPfw8iPdF9rmWN4hz4YyFOmknPg"
        },
        "deletePost": {
          "handler": "handlers/post/deletePost.handler",
          "events": [
            {
              "http": {
                "path": "post/{id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-deletePost",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "DeletePostLambdaVersionaenPdqu6xKUzPAbxMSIKQJ6qb6bflLp4lR4eZKTAQ"
        },
        "getFiltredPosts": {
          "handler": "handlers/post/getFilteredPosts.handler",
          "events": [
            {
              "http": {
                "path": "post/filtred",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getFiltredPosts",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetFiltredPostsLambdaVersion8Pa2CBT7AMEJYr5IavQSeG0itqCE5WNWuqw91aFp0"
        },
        "getAvailablePosts": {
          "handler": "handlers/post/getAvailablePosts.handler",
          "events": [
            {
              "http": {
                "path": "post/available",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getAvailablePosts",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetAvailablePostsLambdaVersionHTV9W5xRrvjnY9OqsIJQHIE1e8HREcNuzlrSrS2q8QA"
        },
        "createOffer": {
          "handler": "handlers/offer/createOffer.handler",
          "events": [
            {
              "http": {
                "path": "offer",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-createOffer",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "CreateOfferLambdaVersionQBYhiFqMrdjrQNVWEogAQbY3osUWubJ6GlNXIqzGEsU"
        },
        "deleteOffer": {
          "handler": "handlers/offer/deleteOffer.handler",
          "events": [
            {
              "http": {
                "path": "offer/{id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-deleteOffer",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "DeleteOfferLambdaVersionEH2FmIConFPbQcMZ64xQm4OGLOR6InRZXDsTpNm7yE"
        },
        "getOfferById": {
          "handler": "handlers/offer/getOfferById.handler",
          "events": [
            {
              "http": {
                "path": "offer/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getOfferById",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetOfferByIdLambdaVersionsL51Oe17mJNox2YsKJKAxXPkaesVgrl9ryWdPoyA"
        },
        "createCategory": {
          "handler": "handlers/categories/createCategory.handler",
          "events": [
            {
              "http": {
                "path": "category",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-createCategory",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "CreateCategoryLambdaVersionyDWILpj8OPaI33LBa9bdYXzqPCVPoQf5s7fFNSFAR9M"
        },
        "deleteCategory": {
          "handler": "handlers/categories/deleteCategory.handler",
          "events": [
            {
              "http": {
                "path": "category/{id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-deleteCategory",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "DeleteCategoryLambdaVersionZuZm6lagWVvng5n0BZvd3iPOf8JUABrhVGRc4DnqQ"
        },
        "getCategoryById": {
          "handler": "handlers/categories/getCategoryById.handler",
          "events": [
            {
              "http": {
                "path": "category/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getCategoryById",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetCategoryByIdLambdaVersionR7iNupptLs3CEyQKe9JddPh4E4jV0DRpkMJFK9IFP8"
        },
        "getAllCategories": {
          "handler": "handlers/categories/getAllCategories.handler",
          "events": [
            {
              "http": {
                "path": "category/all",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getAllCategories",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetAllCategoriesLambdaVersiongZ3MDC9744VdW1PzgplsvodFM5CoFExYXHjQwleXowo"
        },
        "createJob": {
          "handler": "handlers/finishedJobs/createJob.handler",
          "events": [
            {
              "http": {
                "path": "finishedJobs",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-createJob",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "CreateJobLambdaVersion5eCTJpcgefxBlepYwctOIDPfOgnAuNloBmrcHFfxk"
        },
        "getJobById": {
          "handler": "handlers/finishedJobs/getJobById.handler",
          "events": [
            {
              "http": {
                "path": "finishedJobs/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getJobById",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetJobByIdLambdaVersionxnpnth090BFjJGEXdVr2VZk0EF3yQHM2u9gbfOS03M"
        },
        "createComment": {
          "handler": "handlers/comment/createComment.handler",
          "events": [
            {
              "http": {
                "path": "comment",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-createComment",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "CreateCommentLambdaVersionvL54MBFlWuVOQ0wS5D1Xsv2D4gcppX8OMqdU5zRyPxQ"
        },
        "getCommentById": {
          "handler": "handlers/comment/getCommentById.handler",
          "events": [
            {
              "http": {
                "path": "comment/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getCommentById",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetCommentByIdLambdaVersion3iFol9sZKJJLVeAl4JDEHNm80hXKZ7BNvejdG3BRg"
        },
        "deleteComment": {
          "handler": "handlers/comment/deleteComment.handler",
          "events": [
            {
              "http": {
                "path": "comment/{id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-deleteComment",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "DeleteCommentLambdaVersiond6ZiaUz2iy5caNvM2JqI209BiVBSxnGG2jKBA2pQ6Fo"
        },
        "createMessage": {
          "handler": "handlers/message/createMessage.handler",
          "events": [
            {
              "http": {
                "path": "message",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-createMessage",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "CreateMessageLambdaVersionER0n2qIqAMUzUeS1vhcqU47kavn76GTf7ZRG69SZT8"
        },
        "getMessageById": {
          "handler": "handlers/message/getMessageById.handler",
          "events": [
            {
              "http": {
                "path": "message/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getMessageById",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetMessageByIdLambdaVersionIlf4YcWFPPJfdAR8cpqpK1TX2l8WXsYVNtY6IR7o"
        },
        "createNotification": {
          "handler": "handlers/notification/createNotification.handler",
          "events": [
            {
              "http": {
                "path": "notification",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-createNotification",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "CreateNotificationLambdaVersion7HTT24tRWeuVU8J6YxxaNGNAemQgpcJpyQqn937mg"
        },
        "getNotificationById": {
          "handler": "handlers/notification/getNotificationById.handler",
          "events": [
            {
              "http": {
                "path": "notification/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getNotificationById",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetNotificationByIdLambdaVersionHyb6vZfsTIKXFA8zZY55lQTsyxWdPAZf7X73Mjs"
        },
        "createSubscriptionPlan": {
          "handler": "handlers/subscriptionPlan/createPlan.handler",
          "events": [
            {
              "http": {
                "path": "subscriptionPlan",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-createSubscriptionPlan",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "CreateSubscriptionPlanLambdaVersioncMzbn1RcnCG5iHMMNtD1Undq64CjU1yrJYMVX6llu4"
        },
        "getSubscriptionPlan": {
          "handler": "handlers/subscriptionPlan/getPlanById.handler",
          "events": [
            {
              "http": {
                "path": "subscriptionPlan/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getSubscriptionPlan",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetSubscriptionPlanLambdaVersion4VplnXM7srmv7nJ3tLvRPASzRlPnqud96sx4ztHfks"
        },
        "getAllSubscriptionPlans": {
          "handler": "handlers/subscriptionPlan/getAll.handler",
          "events": [
            {
              "http": {
                "path": "subscriptionPlan/all",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getAllSubscriptionPlans",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetAllSubscriptionPlansLambdaVersion09pHQG2mxq702rQJ9VUJh5oCXVemg0A8AGUTXXyZgGk"
        },
        "deleteSubscriptionPlan": {
          "handler": "handlers/subscriptionPlan/deletePlan.handler",
          "events": [
            {
              "http": {
                "path": "subscriptionPlan/{id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-deleteSubscriptionPlan",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "DeleteSubscriptionPlanLambdaVersioniAAZd89xuTRCFWPjFrsUJBPujbkt1XWelZAPiiN84g"
        },
        "createSubscriptionManager": {
          "handler": "handlers/subscriptionManager/createManager.handler",
          "events": [
            {
              "http": {
                "path": "subscriptionManager",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-createSubscriptionManager",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "CreateSubscriptionManagerLambdaVersion4BVaYXQiWynVMdwaysC58jiHVjayD1rMo0hBHSkrus8"
        },
        "getSubscriptionManagerById": {
          "handler": "handlers/subscriptionManager/getManagerById.handler",
          "events": [
            {
              "http": {
                "path": "subscriptionManager/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getSubscriptionManagerById",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetSubscriptionManagerByIdLambdaVersionKGLpHVSs4vj9MFzNfEbTiawUrKnw0wAlKtY2wxNfWc"
        },
        "updateSubscriptionManager": {
          "handler": "handlers/subscriptionManager/updateManager.handler",
          "events": [
            {
              "http": {
                "path": "subscriptionManager/{id}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-updateSubscriptionManager",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "UpdateSubscriptionManagerLambdaVersionqRjeX2ZzStF1Qu4f6rCxPsMgrKkf2bCuiY5vCfnFuXA"
        },
        "getSubscriptionManager": {
          "handler": "handlers/subscriptionManager/getSubscriptionManager.handler",
          "events": [
            {
              "http": {
                "path": "subscriptionManager/business/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getSubscriptionManager",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetSubscriptionManagerLambdaVersionNh2KQHecAYT8ErnfGOLiCzfUQUNzpW3SwtSIMfYDJ20"
        },
        "createPaymentTransaction": {
          "handler": "handlers/paymentTransaction/createPayment.handler",
          "events": [
            {
              "http": {
                "path": "paymentTransaction",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-createPaymentTransaction",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "CreatePaymentTransactionLambdaVersionBPpqa6AjQBH2hZ6M0RIIYovmUgpdRU8wz7cL0uNbQ"
        },
        "getPaymentTransaction": {
          "handler": "handlers/paymentTransaction/getPaymentById.handler",
          "events": [
            {
              "http": {
                "path": "paymentTransaction/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "interio-service-dev-getPaymentTransaction",
          "package": {},
          "memory": 128,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetPaymentTransactionLambdaVersion4ktyDE4oOOjkVcosMqGT8nqzKtis0QzN9REQoLfrUno"
        }
      }
    },
    "serviceRawFile": "org: taleas1\r\napp: interio\r\n\r\nservice: interio-service\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs16.x \r\n  stage: dev\r\n  region: eu-central-1\r\n  memorySize: 128\r\n\r\n  environment:\r\n    MONGODB_URI: ${env:MONGODB_URI} \r\n\r\n# package:\r\n#   include:\r\n#     - models/**\r\n#     - configurations/**\r\n#     - handlers/**\r\n\r\nfunctions:\r\n  getUser:\r\n    handler: handlers/user/getUserById.handler\r\n    events:\r\n      - http:\r\n          path: /user/{id}\r\n          method: GET\r\n          cors: true\r\n  createUser:\r\n    handler: handlers/user/createUser.handler\r\n    events:\r\n      - http:\r\n          path: /user\r\n          method: POST\r\n          cors: true\r\n  deleteUser:\r\n    handler: handlers/user/deleteUser.handler\r\n    events:\r\n      - http:\r\n          path: /user/{id}\r\n          method: DELETE\r\n          cors: true\r\n  getUserName:\r\n    handler: handlers/user/getUserByName.handler\r\n    events:\r\n      - http:\r\n          path: /user/search\r\n          method: GET\r\n          cors: true\r\n  updateUser:\r\n    handler: handlers/user/updateUser.handler\r\n    events:\r\n      - http:\r\n          path: /user/{id}\r\n          method: PUT\r\n          cors: true\r\n  getBusinessById:\r\n    handler: handlers/business/getBusinessById.handler\r\n    events:\r\n      - http:\r\n          path: /business/{id}\r\n          method: GET\r\n          cors: true\r\n  createBusiness:\r\n    handler: handlers/business/createBusiness.handler\r\n    events:\r\n      - http:\r\n          path: /business\r\n          method: POST\r\n          cors: true\r\n  deleteBusiness:\r\n    handler: handlers/business/deleteBusiness.handler\r\n    events:\r\n      - http:\r\n          path: /business/{id}\r\n          method: DELETE\r\n          cors: true\r\n  getBusinessName:\r\n    handler: handlers/business/getBusinessByName.handler\r\n    events:\r\n      - http:\r\n          path: /business/search\r\n          method: GET\r\n          cors: true\r\n  updateBusiness:\r\n    handler: handlers/business/updateBusiness.handler\r\n    events:\r\n      - http:\r\n          path: /business/{id}\r\n          method: PUT\r\n          cors: true\r\n  getPostById:\r\n    handler: handlers/post/getPostById.handler\r\n    events:\r\n      - http:\r\n          path: /post/{id}\r\n          method: GET\r\n          cors: true\r\n  createPost:\r\n    handler: handlers/post/createPost.handler\r\n    events:\r\n      - http:\r\n          path: /post\r\n          method: POST\r\n          cors: true\r\n  deletePost:\r\n    handler: handlers/post/deletePost.handler\r\n    events:\r\n      - http:\r\n          path: /post/{id}\r\n          method: DELETE\r\n          cors: true\r\n  getFiltredPosts:\r\n    handler: handlers/post/getFilteredPosts.handler\r\n    events:\r\n      - http:\r\n          path: /post/filtred\r\n          method: GET\r\n          cors: true\r\n  getAvailablePosts:\r\n    handler: handlers/post/getAvailablePosts.handler\r\n    events:\r\n      - http:\r\n          path: /post/available\r\n          method: GET\r\n          cors: true\r\n  createOffer:\r\n    handler: handlers/offer/createOffer.handler\r\n    events:\r\n      - http:\r\n          path: /offer\r\n          method: POST\r\n          cors: true\r\n  deleteOffer:\r\n    handler: handlers/offer/deleteOffer.handler\r\n    events:\r\n      - http:\r\n          path: /offer/{id}\r\n          method: DELETE\r\n          cors: true\r\n  getOfferById:\r\n    handler: handlers/offer/getOfferById.handler\r\n    events:\r\n      - http:\r\n          path: /offer/{id}\r\n          method: GET\r\n          cors: true\r\n  createCategory:\r\n    handler: handlers/categories/createCategory.handler\r\n    events:\r\n      - http:\r\n          path: /category\r\n          method: POST\r\n          cors: true\r\n  deleteCategory:\r\n    handler: handlers/categories/deleteCategory.handler\r\n    events:\r\n      - http:\r\n          path: /category/{id}\r\n          method: DELETE\r\n          cors: true\r\n  getCategoryById:\r\n    handler: handlers/categories/getCategoryById.handler\r\n    events:\r\n      - http:\r\n          path: /category/{id}\r\n          method: GET\r\n          cors: true\r\n  getAllCategories:\r\n    handler: handlers/categories/getAllCategories.handler\r\n    events:\r\n      - http:\r\n          path: /category/all\r\n          method: GET\r\n          cors: true\r\n  createJob:\r\n    handler: handlers/finishedJobs/createJob.handler\r\n    events:\r\n      - http:\r\n          path: /finishedJobs\r\n          method: POST\r\n          cors: true\r\n  getJobById:\r\n    handler: handlers/finishedJobs/getJobById.handler\r\n    events:\r\n      - http:\r\n          path: /finishedJobs/{id}\r\n          method: GET\r\n          cors: true\r\n  createComment:\r\n    handler: handlers/comment/createComment.handler\r\n    events:\r\n      - http:\r\n          path: /comment\r\n          method: POST\r\n          cors: true\r\n  getCommentById:\r\n    handler: handlers/comment/getCommentById.handler\r\n    events:\r\n      - http:\r\n          path: /comment/{id}\r\n          method: GET\r\n          cors: true\r\n  deleteComment:\r\n    handler: handlers/comment/deleteComment.handler\r\n    events:\r\n      - http:\r\n          path: /comment/{id}\r\n          method: DELETE\r\n          cors: true\r\n  createMessage:\r\n    handler: handlers/message/createMessage.handler\r\n    events:\r\n      - http:\r\n          path: /message\r\n          method: POST\r\n          cors: true\r\n  getMessageById:\r\n    handler: handlers/message/getMessageById.handler\r\n    events:\r\n      - http:\r\n          path: /message/{id}\r\n          method: GET\r\n          cors: true\r\n  createNotification:\r\n    handler: handlers/notification/createNotification.handler\r\n    events:\r\n      - http:\r\n          path: /notification\r\n          method: POST\r\n          cors: true\r\n  getNotificationById:\r\n    handler: handlers/notification/getNotificationById.handler\r\n    events:\r\n      - http:\r\n          path: /notification/{id}\r\n          method: GET\r\n          cors: true\r\n  createSubscriptionPlan:\r\n    handler: handlers/subscriptionPlan/createPlan.handler\r\n    events:\r\n      - http:\r\n          path: /subscriptionPlan\r\n          method: POST\r\n          cors: true\r\n  getSubscriptionPlan:\r\n    handler: handlers/subscriptionPlan/getPlanById.handler\r\n    events:\r\n      - http:\r\n          path: /subscriptionPlan/{id}\r\n          method: GET\r\n          cors: true\r\n  getAllSubscriptionPlans:\r\n    handler: handlers/subscriptionPlan/getAll.handler\r\n    events:\r\n      - http:\r\n          path: /subscriptionPlan/all\r\n          method: GET\r\n          cors: true\r\n  deleteSubscriptionPlan:\r\n    handler: handlers/subscriptionPlan/deletePlan.handler\r\n    events:\r\n      - http:\r\n          path: /subscriptionPlan/{id}\r\n          method: DELETE\r\n          cors: true\r\n  createSubscriptionManager:\r\n    handler: handlers/subscriptionManager/createManager.handler\r\n    events:\r\n      - http:\r\n          path: /subscriptionManager\r\n          method: POST\r\n          cors: true\r\n  getSubscriptionManagerById:\r\n    handler: handlers/subscriptionManager/getManagerById.handler\r\n    events:\r\n      - http:\r\n          path: /subscriptionManager/{id}\r\n          method: GET\r\n          cors: true\r\n  updateSubscriptionManager:\r\n    handler: handlers/subscriptionManager/updateManager.handler\r\n    events:\r\n      - http:\r\n          path: /subscriptionManager/{id}\r\n          method: PUT\r\n          cors: true\r\n  getSubscriptionManager:\r\n    handler: handlers/subscriptionManager/getSubscriptionManager.handler\r\n    events:\r\n      - http:\r\n          path: /subscriptionManager/business/{id}\r\n          method: GET\r\n          cors: true\r\n  createPaymentTransaction:\r\n    handler: handlers/paymentTransaction/createPayment.handler\r\n    events:\r\n      - http:\r\n          path: /paymentTransaction\r\n          method: POST\r\n          cors: true\r\n  getPaymentTransaction:\r\n    handler: handlers/paymentTransaction/getPaymentById.handler\r\n    events:\r\n      - http:\r\n          path: /paymentTransaction/{id}\r\n          method: GET\r\n          cors: true\r\n  \r\n  \r\n  \r\n ",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "93bc2de42810bb0562b05da4f13c53d6",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "b517195c-0b15-4f9f-b44f-23444c1a6099",
    "orgName": "taleas1",
    "userId": "S7sK4DmHfqzbtRSr44",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "rzxl57CQVR0D4XDKW5",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "taleas1",
    "subscription": null,
    "userEmail": "besjolavelo@gmail.com",
    "serviceProviderAwsRegion": "eu-central-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "944511268761",
    "projectType": "traditional",
    "versionSf": "4.4.7",
    "serviceProviderAwsCfStackName": "interio-service-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:eu-central-1:944511268761:stack/interio-service-dev/651a37f0-8d4d-11ef-887b-06d22eb3fe13",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-central-1:944511268761:stack/interio-service-dev/651a37f0-8d4d-11ef-887b-06d22eb3fe13",
    "serviceProviderAwsCfStackCreated": "2024-10-18T12:35:02.150Z",
    "serviceProviderAwsCfStackUpdated": "2024-10-22T15:48:55.620Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "DeletePostLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-deletePost:33",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-DeletePostLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetBusinessByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getBusinessById:43",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetBusinessByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetNotificationByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getNotificationById:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetNotificationByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteOfferLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-deleteOffer:19",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-DeleteOfferLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getUser:45",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserNameLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getUserName:44",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetUserNameLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateSubscriptionManagerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-updateSubscriptionManager:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-UpdateSubscriptionManagerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
        "ExportName": "sls-interio-service-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "GetPostByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getPostById:33",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetPostByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetCommentByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getCommentById:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetCommentByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreatePostLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-createPost:33",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-CreatePostLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateCategoryLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-createCategory:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-CreateCategoryLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllCategoriesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getAllCategories:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetAllCategoriesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetSubscriptionPlanLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getSubscriptionPlan:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetSubscriptionPlanLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateSubscriptionManagerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-createSubscriptionManager:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-CreateSubscriptionManagerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateOfferLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-createOffer:19",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-CreateOfferLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-createUser:46",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-CreateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetBusinessNameLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getBusinessName:36",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetBusinessNameLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteCommentLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-deleteComment:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-DeleteCommentLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-deleteUser:43",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-DeleteUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreatePaymentTransactionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-createPaymentTransaction:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-CreatePaymentTransactionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAvailablePostsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getAvailablePosts:28",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetAvailablePostsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetFiltredPostsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getFiltredPosts:29",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetFiltredPostsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMessageByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getMessageById:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetMessageByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetSubscriptionManagerByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getSubscriptionManagerById:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetSubscriptionManagerByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteBusinessLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-deleteBusiness:36",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-DeleteBusinessLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteSubscriptionPlanLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-deleteSubscriptionPlan:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-DeleteSubscriptionPlanLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateBusinessLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-createBusiness:44",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-CreateBusinessLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllSubscriptionPlansLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getAllSubscriptionPlans:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetAllSubscriptionPlansLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateBusinessLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-updateBusiness:41",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-UpdateBusinessLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateJobLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-createJob:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-CreateJobLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-updateUser:44",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-UpdateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateMessageLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-createMessage:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-CreateMessageLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetJobByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getJobById:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetJobByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetCategoryByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getCategoryById:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetCategoryByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateCommentLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-createComment:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-CreateCommentLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetOfferByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getOfferById:19",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetOfferByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteCategoryLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-deleteCategory:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-DeleteCategoryLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateNotificationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-createNotification:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-CreateNotificationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPaymentTransactionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getPaymentTransaction:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetPaymentTransactionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateSubscriptionPlanLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-createSubscriptionPlan:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-CreateSubscriptionPlanLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetSubscriptionManagerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:944511268761:function:interio-service-dev-getSubscriptionManager:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-interio-service-dev-GetSubscriptionManagerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://akvct836lc.execute-api.eu-central-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-interio-service-dev-ServiceEndpoint"
      }
    ]
  }
}