{
  "service": {
    "service": "interio-service",
    "serviceObject": {
      "name": "interio-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs16.x",
      "stage": "dev",
      "region": "eu-central-1",
      "memorySize": 128,
      "environment": {
        "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/interio-service-dev-getUser"
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/interio-service-dev-createUser"
            }
          },
          "CreateBusinessLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/interio-service-dev-createBusiness"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "interio-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/interio-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/interio-service-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "interio-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
<<<<<<< Updated upstream
                "S3Key": "serverless/interio-service/dev/1729495051686-2024-10-21T07:17:31.686Z/interio-service.zip"
=======
                "S3Key": "serverless/interio-service/dev/1729265231605-2024-10-18T15:27:11.605Z/interio-service.zip"
>>>>>>> Stashed changes
              },
              "Handler": "handlers/user/getUserById.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "interio-service-dev-getUser",
              "MemorySize": 128,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
<<<<<<< Updated upstream
                "S3Key": "serverless/interio-service/dev/1729495051686-2024-10-21T07:17:31.686Z/interio-service.zip"
=======
                "S3Key": "serverless/interio-service/dev/1729265231605-2024-10-18T15:27:11.605Z/interio-service.zip"
>>>>>>> Stashed changes
              },
              "Handler": "handlers/user/createUser.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "interio-service-dev-createUser",
              "MemorySize": 128,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
<<<<<<< Updated upstream
          "CreateBusinessLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
                "S3Key": "serverless/interio-service/dev/1729495051686-2024-10-21T07:17:31.686Z/interio-service.zip"
              },
              "Handler": "handlers/business/createBusiness.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "interio-service-dev-createBusiness",
              "MemorySize": 128,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MONGODB_URI": "mongodb+srv://interiotaleas:interiotaleas@cluster0.vnxct.mongodb.net/Interio"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateBusinessLogGroup"
            ]
          },
          "GetUserLambdaVersionqz0XD0Pq8NdtVVMAK2dRZ5GsDKSP2y6WERk2teC6Q": {
=======
          "GetUserLambdaVersionSKTsGHM0BhyrJUOR7Bd9ofuJeNqCkGfi4MCg8q1JGOk": {
>>>>>>> Stashed changes
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
<<<<<<< Updated upstream
              "CodeSha256": "nhATOb4OrAIv3XkQS3+FS7ovgR3+uSDgPNEb/IAEgkI="
            }
          },
          "CreateUserLambdaVersionfi8vUNMqozrL0h9FJVxop4QJ5vnbrWp8XrmHxlUVirY": {
=======
              "CodeSha256": "Cx4jVJL75HDzfkrYSmaLiaeXZvcSB2edTLWnOkcy4DU="
            }
          },
          "CreateUserLambdaVersionFQiP6CQkA8zx0hlfRNU4zdAphutLnhgTBqc3SZpfw": {
>>>>>>> Stashed changes
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
<<<<<<< Updated upstream
              "CodeSha256": "nhATOb4OrAIv3XkQS3+FS7ovgR3+uSDgPNEb/IAEgkI="
            }
          },
          "CreateBusinessLambdaVersiona2nta4fdfgVl1gYRXedPdtRLNfqEIqokT1TQ4tsFjqI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateBusinessLambdaFunction"
              },
              "CodeSha256": "nhATOb4OrAIv3XkQS3+FS7ovgR3+uSDgPNEb/IAEgkI="
=======
              "CodeSha256": "Cx4jVJL75HDzfkrYSmaLiaeXZvcSB2edTLWnOkcy4DU="
>>>>>>> Stashed changes
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-interio-service",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
<<<<<<< Updated upstream
          "ApiGatewayResourceBusiness": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "business",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
=======
>>>>>>> Stashed changes
          "ApiGatewayMethodUserIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
<<<<<<< Updated upstream
          "ApiGatewayMethodBusinessOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBusiness"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
=======
>>>>>>> Stashed changes
          "ApiGatewayMethodUserIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateUserLambdaPermissionApiGateway"
            ]
          },
<<<<<<< Updated upstream
          "ApiGatewayMethodBusinessPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBusiness"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateBusinessLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateBusinessLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1729495047033": {
=======
          "ApiGatewayDeployment1729265226359": {
>>>>>>> Stashed changes
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodUserIdVarOptions",
              "ApiGatewayMethodUserOptions",
<<<<<<< Updated upstream
              "ApiGatewayMethodBusinessOptions",
              "ApiGatewayMethodUserIdVarGet",
              "ApiGatewayMethodUserPost",
              "ApiGatewayMethodBusinessPost"
=======
              "ApiGatewayMethodUserIdVarGet",
              "ApiGatewayMethodUserPost"
>>>>>>> Stashed changes
            ]
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateBusinessLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateBusinessLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-eu-central-1-7d33afbf-5e19",
            "Export": {
              "Name": "sls-interio-service-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< Updated upstream
              "Ref": "GetUserLambdaVersionqz0XD0Pq8NdtVVMAK2dRZ5GsDKSP2y6WERk2teC6Q"
=======
              "Ref": "GetUserLambdaVersionSKTsGHM0BhyrJUOR7Bd9ofuJeNqCkGfi4MCg8q1JGOk"
>>>>>>> Stashed changes
            },
            "Export": {
              "Name": "sls-interio-service-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< Updated upstream
              "Ref": "CreateUserLambdaVersionfi8vUNMqozrL0h9FJVxop4QJ5vnbrWp8XrmHxlUVirY"
=======
              "Ref": "CreateUserLambdaVersionFQiP6CQkA8zx0hlfRNU4zdAphutLnhgTBqc3SZpfw"
>>>>>>> Stashed changes
            },
            "Export": {
              "Name": "sls-interio-service-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "CreateBusinessLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateBusinessLambdaVersiona2nta4fdfgVl1gYRXedPdtRLNfqEIqokT1TQ4tsFjqI"
            },
            "Export": {
              "Name": "sls-interio-service-dev-CreateBusinessLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-interio-service-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "getUser": {
        "handler": "handlers/user/getUserById.handler",
        "events": [
          {
            "http": {
              "path": "user/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "interio-service-dev-getUser",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
<<<<<<< Updated upstream
        "versionLogicalId": "GetUserLambdaVersionqz0XD0Pq8NdtVVMAK2dRZ5GsDKSP2y6WERk2teC6Q"
=======
        "versionLogicalId": "GetUserLambdaVersionSKTsGHM0BhyrJUOR7Bd9ofuJeNqCkGfi4MCg8q1JGOk"
>>>>>>> Stashed changes
      },
      "createUser": {
        "handler": "handlers/user/createUser.handler",
        "events": [
          {
            "http": {
              "path": "user",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "interio-service-dev-createUser",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
<<<<<<< Updated upstream
        "versionLogicalId": "CreateUserLambdaVersionfi8vUNMqozrL0h9FJVxop4QJ5vnbrWp8XrmHxlUVirY"
      },
      "createBusiness": {
        "handler": "handlers/business/createBusiness.handler",
        "events": [
          {
            "http": {
              "path": "business",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "interio-service-dev-createBusiness",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "CreateBusinessLambdaVersiona2nta4fdfgVl1gYRXedPdtRLNfqEIqokT1TQ4tsFjqI"
=======
        "versionLogicalId": "CreateUserLambdaVersionFQiP6CQkA8zx0hlfRNU4zdAphutLnhgTBqc3SZpfw"
>>>>>>> Stashed changes
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "org": "taleas1",
      "app": "interio",
      "service": "interio-service",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "app": "interio",
    "appId": null,
    "org": "taleas1",
    "orgId": null,
    "layers": {},
<<<<<<< Updated upstream
    "artifact": "C:\\Users\\User\\Documents\\GitHub\\Interio-Backend\\.serverless\\interio-service.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/interio-service/dev/1729495051686-2024-10-21T07:17:31.686Z",
=======
    "artifact": "C:\\Users\\Admin\\Documents\\GitHub\\Interio-Backend\\.serverless\\interio-service.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/interio-service/dev/1729265231605-2024-10-18T15:27:11.605Z",
>>>>>>> Stashed changes
    "artifact": "interio-service.zip"
  }
}